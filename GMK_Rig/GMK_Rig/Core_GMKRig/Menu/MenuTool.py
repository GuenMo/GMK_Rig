import pymel.core as pm

class GMKimMenuTool():
    def __init__(self):
        self.allCtrlList = self.getAllCtrls()
        self.basicCtrlList = self.getBasicCtrls()[0]
        self.basicCtrlPyList = self.getBasicCtrls()[1]
        
        self.scriptNode = []
        self.goupID = []
        
    def getAllCtrls(self):  
        try:
            pm.select("*Ctrl")
            ctrlList = pm.ls(sl=True)
            pm.select(cl=True)
            return ctrlList
        except:
            return None
    
    def getBasicCtrls(self):
        ctrlsDic = {}
        ctrlsList = []
        
        allCtrl         = { "All"           : ["WorldCtrl", "MoveCtrl"] }
        flyCtrl         = { "Fly"           : ["FlyCtrl"] }
        bodyCtrl        = { "Body"          : ["RootCtrl"] } # "Tail, etc"
        spineCtrl       = { "Spine"         : ["HipIKCtrl", "BodyIKCtrl", "SpineFKCtrl", "SpineIKCtrl", "SpineFK1Ctrl", "SpineIK1Ctrl", "SpineFK2Ctrl", "SpineIK2Ctrl"] }
        headCtrl        = { "Head"          : ["HeadCtrl", "NeckCtrl"] } # "Ear, Hair, SquashBendCtrl"
        facialCtrl      = { "Facial"        : ["EyeCtrl", "LeftEyeCtrl", "RightEyeCtrl", "JawCtrl", "TongueCtrl", "TongueIKCtrl", "TongueFK1Ctrl", "Tongue1Ctrl", "TongueFK2Ctrl", "Tongue2Ctrl", "TongueFK3Ctrl", "Tongue3Ctrl", "TongueFK4Ctrl", "Tongue4Ctrl", "TongueFK5Ctrl"] }# added Facial Ctrls "LowerTeethCtrl", "UpperTeethCtrl"
        rightArmCtrl    = { "RightArm"      : ["RightClavicleCtrl", "RightArmIKCtrl", "RightShoulderFKCtrl", "RightElbowFKCtrl", "RightWristFKCtrl", "RightArmIKFKCtrl"] }
        rightFingerCtrl = { "RightFinger"   : ["RightFingerCtrl", "RightFingerThumb1Ctrl", "RightFingerThumb2Ctrl", "RightFingerThumb3Ctrl", "RightFingerThumb4Ctrl", "RightFingerIndex1Ctrl", "RightFingerIndex2Ctrl", "RightFingerIndex3Ctrl", "RightFingerIndex4Ctrl", "RightFingerMiddle1Ctrl","RightFingerMiddle2Ctrl","RightFingerMiddle3Ctrl","RightFingerMiddle4Ctrl","RightFingerRing1Ctrl","RightFingerRing2Ctrl","RightFingerRing3Ctrl","RightFingerRing4Ctrl", "RightFingerPinky1Ctrl", "RightFingerPinky2Ctrl", "RightFingerPinky3Ctrl", "RightFingerPinky4Ctrl"] }
        leftArmCtrl     = { "LeftArm"       : ["LeftClavicleCtrl", "LeftArmIKCtrl", "LeftShoulderFKCtrl", "LeftElbowFKCtrl", "LeftWristFKCtrl", "LeftArmIKFKCtrl"] }
        leftFingerCtrl  = { "LeftFinger"    : ["LeftFingerCtrl", "LeftFingerThumb1Ctrl", "LeftFingerThumb2Ctrl", "LeftFingerThumb3Ctrl", "LeftFingerThumb4Ctrl","LeftFingerIndex1Ctrl", "LeftFingerIndex2Ctrl", "LeftFingerIndex3Ctrl", "LeftFingerIndex4Ctrl","LeftFingerMiddle1Ctrl","LeftFingerMiddle2Ctrl","LeftFingerMiddle3Ctrl","LeftFingerMiddle4Ctrl", "LeftFingerRing1Ctrl",  "LeftFingerRing2Ctrl",  "LeftFingerRing3Ctrl",  "LeftFingerRing4Ctrl", "LeftFingerPinky1Ctrl", "LeftFingerPinky2Ctrl", "LeftFingerPinky3Ctrl", "LeftFingerPinky4Ctrl"] } 
        rightLegCtrl    = { "RightLeg"      : ["RightLegIKCtrl", "RightHipFKCtrl", "RightKneeFKCtrl", "RightAnkleFKCtrl", "RightLegIKFKCtrl"] }# "RightPelvisCtrl"
        rightToeCtrl    = { "RightToe"      : ["RightToeCtrl"] } # ThumbToe, etc
        leftLegCtrl     = { "LeftLeg"       : ["LeftLegIKCtrl", "LeftHipFKCtrl", "LeftKneeFKCtrl", "LeftAnkleFKCtrl", "LeftLegIKFKCtrl"] } # "LeftPelvisCtrl"
        leftToeCtrl     = { "LeftToe"       : ["LeftToeCtrl"] } # ThumbToe, etc

        for ctr in [allCtrl,flyCtrl,bodyCtrl,spineCtrl,headCtrl,facialCtrl,rightArmCtrl,rightFingerCtrl,leftArmCtrl,leftFingerCtrl,rightLegCtrl,rightToeCtrl,leftLegCtrl,leftToeCtrl]:
            ctrlsDic.update(ctr)
        
        for key, value in ctrlsDic.iteritems():
            temp = [key,value]
            ctrlsList.append(temp[1])
        
        pm.select(cl=True)
        try:
            pm.select(ctrlsList)
            ctrlsList = pm.ls(sl=True)
            pm.select(cl=True)
            return (ctrlsDic, ctrlsList)
        except:
            return (None, None)
    
    def createScriptNode(self):
        if not pm.objExists("KGMRigMenu") and not pm.objExists("KGMMenuChange"):
            pyScript = '# -*- coding: utf-8 -*-\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport maya.OpenMaya as OM\nfrom functools import partial\n\ndef KGMRigMenuProc():\n    KGMMenuChange = "KGMMenuChange"\n    if not cmds.objExists("KGMRigMenu"):\n        KGMCtrlNS = cmds.ls("*KGMRigMenu*", r=True)[0]\n        KGMMenuChange = KGMCtrlNS.replace("KGMRigMenu","KGMMenuChange") \n    mel.eval(\'source "expressionEditor.mel";\')\n    mel.eval(\'source "AEscriptTemplate.mel";\')\n    mel.eval(\'source "dagMenuProc.mel";\')\n    cmds.scriptNode(KGMMenuChange, eb=True)\nKGMRigMenuProc()\n\ndef KGMRigMenu(parent, KGMCtrl):\n\n    CtrlName = KGMCtrl.rpartition("|")[2]\n    RigMenuList = []\n    RigSubMenuList = []\n    MirrorMenu = []\n    MenuPosition=["SW","W","NW","N","NE","E","SE","S"]\n    \n    for i in range(len(cmds.listConnections(KGMCtrl + ".KGMRigMenuItem"))):\n        RigSubMenuList = cmds.listConnections(KGMCtrl + ".KGMRigMenuItem[%i]" %i)[0]\n        RigMenuList.append(RigSubMenuList)\n\n    cmds.setParent(parent, m=True)\n    cmds.menuItem(version = "2014" , bld = True, l = CtrlName) \n    cmds.menuItem(d = 1)\n    cmds.menuItem(d = 1)\n    \n    if len(RigMenuList) > 0:\n        cmds.menuItem(sm=True, l="Select")\n        RigSubMenuList = cmds.listAttr(RigMenuList[0], userDefined = True)\n        cmds.menuItem(l = CtrlName,  c = partial(KGMSelectCtrl, KGMCtrl))\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0:\n                cmds.menuItem(l = RigSubMenu, c = partial(KGMPoseSet,RigMenuList[0], RigSubMenu, 0) )\n            if "Arm" in RigSubMenu:\n                MirrorMenu.append("Arms")\n        cmds.setParent(parent, m=True)\n        \n        cmds.menuItem(aob=True, sm=True, l="Key")\n        \n        cmds.menuItem(sm=True, l="Set Key")\n        cmds.menuItem(l=CtrlName, c = partial(KGMSetKeyframe, KGMCtrl))\n        cmds.menuItem(d = 1)\n        cmds.menuItem(l = "Selected", c = partial( KGMPoseSet, RigMenuList[0], "Selected", 1) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0 :\n                cmds.menuItem(l = RigSubMenu, c = partial( KGMPoseSet, RigMenuList[0], RigSubMenu, 1) )\n            if "Finger" in RigSubMenu:\n                MirrorMenu.append("Fingers")\n        cmds.setParent("..", m=True)\n       \n        cmds.menuItem(sm=True, l="Copy Key")\n        cmds.menuItem(l=CtrlName, c = partial(KGMCopyKeyframe, KGMCtrl) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0 :\n                cmds.menuItem(l = RigSubMenu, c = partial( KGMPoseSet, RigMenuList[0], RigSubMenu, 2) )\n            if "Leg" in RigSubMenu:\n                MirrorMenu.append("Legs")\n        cmds.setParent("..", m=True)\n        \n        cmds.menuItem(l="Paste Key", c = partial(KGMPoseSet, RigMenuList[0], cmds.optionVar(q="KGMCopyKeyPart"),3) )\n        cmds.setParent(parent, m=True)\n\n        cmds.menuItem(aob=True, sm=True, l="Pose")\n        \n        cmds.menuItem(sm=True, l="Bind Pose")\n        cmds.menuItem(l=CtrlName, c = partial(KGMSetBindPose, KGMCtrl))\n        cmds.menuItem(d = 1)\n        cmds.menuItem(l = "Selected", c = partial( KGMPoseSet, RigMenuList[0], "Selected", 4) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0 :\n                cmds.menuItem(l = RigSubMenu, c = partial( KGMPoseSet, RigMenuList[0], RigSubMenu, 4) )\n            if "Toe" in RigSubMenu:\n                MirrorMenu.append("Toes")\n        cmds.setParent("..", m=True)\n        cmds.menuItem(d = 1)\n        \n        cmds.menuItem(sm=True, l="<-Mirror->")\n        cmds.menuItem( l=CtrlName, c=partial(KGMSetMirrorPose, KGMCtrl, 1) )\n        cmds.menuItem(d = 1)\n        cmds.menuItem( l="Selected", c=partial(KGMMirrorSet, RigMenuList[0], "Selected", 1) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0:\n                if not "Arm" in RigSubMenu and not "Leg" in RigSubMenu and not "Finger" in RigSubMenu and not "Toe" in RigSubMenu:\n                    cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 1) )\n        for RigSubMenu in sorted(list(set(MirrorMenu))):\n            if len(RigSubMenu) > 0:\n                cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 1) )\n        cmds.setParent("..", m=True)\n        \n        cmds.menuItem(sm=True, l="Mirror->")\n        if not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n            cmds.menuItem( l=CtrlName, c=partial(KGMSetMirrorPose, KGMCtrl, 2) )\n        cmds.menuItem(d = 1)\n        cmds.menuItem(l = "Selected", c = partial( KGMMirrorSet, RigMenuList[0], "Selected", 2) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0:\n                if not "Arm" in RigSubMenu and not "Leg" in RigSubMenu and not "Finger" in RigSubMenu and not "Toe" in RigSubMenu:\n                    cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 2) )\n        for RigSubMenu in sorted(list(set(MirrorMenu))):\n            if len(RigSubMenu) > 0:\n                cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 2) )\n        cmds.setParent("..", m=True)\n        \n        cmds.menuItem(sm=True, l="<-Mirror")\n        if not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n            cmds.menuItem( l=CtrlName, c=partial(KGMSetMirrorPose, KGMCtrl, 3) )\n        cmds.menuItem(d = 1)\n        cmds.menuItem(l = "Selected", c = partial( KGMMirrorSet, RigMenuList[0], "Selected", 3) )\n        cmds.menuItem(d = 1)\n        for RigSubMenu in RigSubMenuList:\n            if len(RigSubMenu) > 0:\n                if not "Arm" in RigSubMenu and not "Leg" in RigSubMenu and not "Finger" in RigSubMenu and not "Toe" in RigSubMenu:\n                    cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 3) )\n        for RigSubMenu in sorted(list(set(MirrorMenu))):\n            if len(RigSubMenu) > 0:\n                cmds.menuItem( l=RigSubMenu, c=partial(KGMMirrorSet, RigMenuList[0], RigSubMenu, 3) )\n        cmds.setParent("..", m=True)\n        \n        cmds.setParent(parent, m=True)\n\n    if len( cmds.listConnections(KGMCtrl+".KGMRigMenuItem") )> 1:\n        RigSubMenuList = cmds.connectionInfo(RigMenuList[1]+".IKFKAttr", sfd=True)\n        if cmds.getAttr(RigSubMenuList) < 0.5:\n            cmds.menuItem(l="Go To FK", rp = MenuPosition[2], c=partial(KGMIKFKAttrTimeShiftKey ,RigMenuList[1], 1))\n        else:\n            cmds.menuItem(l="Go To IK", rp = MenuPosition[2], c=partial(KGMIKFKAttrTimeShiftKey ,RigMenuList[1], 0))\n    if cmds.attributeQuery("Follow", node = KGMCtrl, ex=True):\n        RigSubMenuList = (cmds.addAttr(KGMCtrl+".Follow", q=True, en=True)).split(":")\n        ActivateIndex = cmds.getAttr(KGMCtrl+".Follow")\n        index = 8 - len(RigSubMenuList)\n        IndexOffset = index + ActivateIndex\n        for RigSubMenu in RigSubMenuList:\n            if IndexOffset == index:\n                cmds.menuItem(version = "2014", l="Follow " + RigSubMenu , rp = MenuPosition[index], c = partial(KGMFollwSnap, KGMCtrl, index - 8 + len(RigSubMenuList)))\n            else:\n                cmds.menuItem(l="Follow " + RigSubMenu , rp = MenuPosition[index], c = partial(KGMFollwSnap, KGMCtrl, index - 8 + len(RigSubMenuList)))\n            index += 1\n        if "ArmIK" in KGMCtrl or "LegIK" in KGMCtrl:\n            cmds.menuItem(l="Go To Parent", rp = MenuPosition[1], c = partial(KGMIKParentSnap, KGMCtrl) )\n        \n    cmds.setParent(parent, m=True)\n    cmds.menuItem(d = 1)\n    cmds.menuItem(l = "Ani HUD", c = KGMAniHUD_run) \n\n    \nclass KGMAniHUD():\n    def __init__(self):\n\n        self.UIElements = {}\n\n        windowName = "Ani_HUD"\n        windowTitle = "Gale HUD"\n        windowWidth = 200\n        windowHeight = 50\n\n        if cmds.window(windowName, exists=True):\n            cmds.deleteUI(windowName)\n\n        self.UIElements["window"] = cmds.window(windowName, width=windowWidth, height=windowHeight, title=windowTitle, sizeable=True)\n        self.UIElements["topLevelColumn"] = cmds.columnLayout(adjustableColumn=True, columnAlign="center")\n        self.UIElements["name_textFild"] = cmds.textField(text="Artist Name")\n\n        self.UIElements["HUD_On_btn"] = cmds.button(label = "On", c = self.onHUD)\n        self.UIElements["HUD_Off_btn"] = cmds.button(label = "Off", c = self.offHUD)\n        self.UIElements["window"] = cmds.window(windowName, e=True, width=windowWidth, height=windowHeight, title=windowTitle, sizeable=True)\n        cmds.showWindow(self.UIElements["window"])\n\n    def getFocal(self, *args):\n        if cmds.objExists("Rcam"):\n            focalLength = cmds.camera("Rcam", q=True, focalLength=True)\n            return focalLength\n        else:\n            return "Not exists \'Rcam\'!!"\n\n    def getDate(self, *args):\n        return cmds.date(format="YYYY-MM-DD")\n\n    def getArtist(self, *args):\n        artistName = cmds.textField( self.UIElements["name_textFild"], q=True, text=True)\n        return artistName.encode("cp949")\n\n    def getScName(self, *args):\n        fileFullName = cmds.file(q=True, sn=True)\n\n        if fileFullName != "":\n            split = fileFullName.rpartition(".mb")[0]\n            fileName =  split.rpartition("/")[2]\n            sceneName = fileName.rpartition("_")[0]\n            return sceneName\n        else:\n            return "Untitled"\n\n    def offHUD(self, *args):\n        if cmds.headsUpDisplay("HUDFocalLength", exists=True):\n            cmds.headsUpDisplay("HUDFocalLength", rem=True)\n        if cmds.headsUpDisplay("HUDDate", exists=True):\n            cmds.headsUpDisplay("HUDDate", rem=True)\n        if cmds.headsUpDisplay("HUDArtist", exists=True):\n            cmds.headsUpDisplay("HUDArtist", rem=True)\n        if cmds.headsUpDisplay("HUDScName", exists=True):\n            cmds.headsUpDisplay("HUDScName", rem=True)\n        if cmds.headsUpDisplay("HUDCurrentFrame", exists=True):\n            cmds.headsUpDisplay("HUDCurrentFrame", rem=True)\n        if cmds.headsUpDisplay("HUDObjectPosition", exists=True):\n            cmds.headsUpDisplay("HUDObjectPosition", rem=True)\n\n    def onHUD(self, *args):\n        self.offHUD()\n        blockSize = "small"\n        dataFontSize = "small"\n        mel.eval("displayColor -dormant headsUpDisplayLabels 17;")\n        mel.eval("displayColor -dormant headsUpDisplayValues 16;")\n\n        cmds.headsUpDisplay( "HUDFocalLength",  section=5, block=1, blockSize=blockSize, dataFontSize = dataFontSize, label="FocalLength:", command=self.getFocal)\n        cmds.headsUpDisplay( "HUDDate",         section=5, block=2, blockSize=blockSize, dataFontSize = dataFontSize, label="Date:",        command=self.getDate)\n        cmds.headsUpDisplay( "HUDArtist",       section=5, block=3, blockSize=blockSize, dataFontSize = dataFontSize, label="Artist:",      command=self.getArtist)\n        cmds.headsUpDisplay( "HUDScName",       section=5, block=4, blockSize=blockSize, dataFontSize = dataFontSize, label="Scene:",       command=self.getScName)\n        cmds.headsUpDisplay( "HUDCurrentFrame", section=5, block=5, blockSize=blockSize, dataFontSize = dataFontSize, label="Frame:",preset = "currentFrame")\n\ndef KGMAniHUD_run(*args):\n    KGMAniHUD()\n\ndef KGMFollwSnap(KGMCtrl, KGMFollowValue, *args):\n    translateValue  = cmds.xform(KGMCtrl, q=True, ws=True, rp=True)\n    rotateValue     = cmds.xform(KGMCtrl, q=True, ws=True, ro=True)\n    cmds.setAttr(KGMCtrl+".Follow", KGMFollowValue)\n    \n    translateVector = OM.MVector(translateValue[0],  translateValue[1],   translateValue[2])\n    rotateVector    = OM.MVector(rotateValue[0],     rotateValue[1],      rotateValue[2])\n    \n    cmds.move(translateVector.x, translateVector.y, translateVector.z, KGMCtrl)\n    cmds.xform(KGMCtrl, ws=True, ro=[rotateVector.x , rotateVector.y, rotateVector.z])\n\ndef KGMIKParentSnap(KGMCtrl, *args):\n    if "Arm" in KGMCtrl:\n        KGMParentJnt = KGMCtrl.replace("IKCtrl","DwArc3Jnt") \n        KGMRotateValue=cmds.xform(KGMParentJnt, q=True, ws=True, ro=True)\n        cmds.xform( KGMCtrl, ws=True, ro = KGMRotateValue )\n    elif "Leg" in KGMCtrl:\n        KGMParentJnt = KGMCtrl.replace("IKCtrl","DwArc3Jnt") \n        KGMRotateValue=cmds.xform(KGMParentJnt, q=True, ws=True, ro=True)\n        if "Left" in KGMCtrl:\n            cmds.xform( KGMCtrl, ws=True, ro =[ KGMRotateValue[1], 0, 0 ] )\n        elif "Right" in KGMCtrl:\n            cmds.xform( KGMCtrl, ws=True, ro =[ -KGMRotateValue[1], 0, 0 ] )\n    \ndef KGMSelectCtrl(ctrl,*args):   \n    cmds.select(ctrl, r=True);\n\ndef KGMSetKeyframe(ctrl, *args):\n    cmds.setKeyframe(ctrl)\ndef KGMCopyKeyframe(ctrl, *args):\n    cmds.copyKey(ctrl)\n    if cmds.optionVar(exists = "KGMCopyKeyPart"):\n        cmds.optionVar(remove = "KGMCopyKeyPart")\n    cmds.optionVar(sv = ["VKhanCopyKeyPart", ctrl])\n    if cmds.optionVar(exists = "KGMCopyKeyFrame"):\n        cmds.optionVar(remove = "KGMCopyKeyFrame")\n    cmds.optionVar(fv = ["KGMCopyKeyFrame", cmds.currentTime(q=True)])\n    \ndef KGMPoseSet(KGMNode, KGMPart, KGMOption, *args):  \n    KGMAttrList = cmds.listAttr(KGMNode, ud=True)\n    KGMAttrConnectionList = []\n    KGMCtrl = ""\n    KGMCtrlList = []\n    \n    for KGMAttr in KGMAttrList:\n        KGMAttrConnectionList = cmds.listConnections(KGMNode + "." + KGMAttr)\n        if KGMAttrConnectionList == None :\n            KGMAttrConnectionList = [] \n        for KGMCtrl in KGMAttrConnectionList:\n            if "All" in KGMPart:\n                if KGMOption == 4:\n                    KGMSetBindPose(KGMCtrl)\n                else:\n                    KGMCtrlList.append(KGMCtrl)\n            elif "Fly" in KGMPart and "All" not in KGMAttr:\n                if KGMOption == 4:\n                    KGMSetBindPose(KGMCtrl)\n                else:\n                    KGMCtrlList.append(KGMCtrl)\n            elif "Body" in KGMPart and "All" not in KGMAttr and "Fly" not in KGMAttr:\n                if KGMOption == 4:\n                    KGMSetBindPose(KGMCtrl)\n                else:\n                    KGMCtrlList.append(KGMCtrl)\n            elif "Arms" in KGMPart :\n                if "Arm" in KGMAttr or "Finger" in KGMAttr:\n                    if KGMOption == 4:\n                        KGMSetBindPose(KGMCtrl)\n                    else:\n                        KGMCtrlList.append(KGMCtrl)\n            elif "Legs" in KGMPart :\n                if "Leg" in KGMAttr or "Toe" in KGMAttr:\n                    if KGMOption == 4:\n                        KGMSetBindPose(KGMCtrl)\n                    else:\n                        KGMCtrlList.append(KGMCtrl)\n            elif "Head" in KGMPart :\n                if "Head" in KGMAttr or "Facial" in KGMAttr : #or "Hair" in KGMAttr:\n                    if KGMOption == 4:\n                        KGMSetBindPose(KGMCtrl)\n                    else:\n                        KGMCtrlList.append(KGMCtrl)\n            elif KGMAttr in KGMPart:\n                if KGMOption == 4:\n                    KGMSetBindPose(KGMCtrl)\n                else:\n                    KGMCtrlList.append(KGMCtrl)\n\n    if "Selected" in KGMPart:\n        KGMAttrConnectionList = cmds.ls(sl=True)\n        for KGMCtrl in KGMAttrConnectionList:\n            if cmds.attributeQuery("KGMRigMenuItem", node = KGMCtrl, ex=True):\n                if KGMOption == 4:\n                    KGMSetBindPose(KGMCtrl)\n                else:\n                    KGMCtrlList.append(KGMCtrl)\n                    \n    if KGMCtrlList == []:\n        KGMCtrlList=KGMPart\n    \n    if KGMOption == 0:\n        cmds.select(KGMCtrlList, r=True)\n    elif KGMOption == 1:\n        cmds.setKeyframe(KGMCtrlList)\n    elif KGMOption == 2:\n        cmds.copyKey(KGMCtrlList)\n        if cmds.optionVar(exists="KGMCopyKeyPart"):\n            cmds.optionVar(remove="KGMCopyKeyPart")\n        cmds.optionVar(sv = ["KGMCopyKeyPart", KGMPart])\n        if cmds.optionVar(exists="KGMCopyKeyFrame"):\n            cmds.optionVar(remove="KGMCopyKeyFrame")\n        cmds.optionVar(fv=["KGMCopyKeyFrame",cmds.currentTime(q=True)] )\n    elif KGMOption == 3 and cmds.optionVar(exists = "KGMCopyKeyPart") and cmds.optionVar(exists = "KGMCopyKeyFrame"):\n        cmds.pasteKey( KGMCtrlList, to = ( cmds.currentTime(q=True) - float(cmds.optionVar(q= "KGMCopyKeyFrame"))) )\n          \ndef KGMSetBindPose(KGMBindPoseCtrl, *args):\n    KGMBindPoseCtrlAttrList = []\n    if len(cmds.ls(KGMBindPoseCtrl)) > 0:\n        KGMBindPoseCtrlAttrList = cmds.listAttr(KGMBindPoseCtrl, k=True, u=True, m=True, sa=True)\n        for KGMBindPoseAttr in KGMBindPoseCtrlAttrList:\n            if  "IKFK" in KGMBindPoseAttr or "FKIK" in KGMBindPoseAttr or "IkFk" in KGMBindPoseAttr or "FkIk" in KGMBindPoseAttr or "ikfk" in KGMBindPoseAttr or "fkik" in KGMBindPoseAttr  or "Follow" in KGMBindPoseAttr or "Stretch" in KGMBindPoseAttr: # or len(cmds.listConnections(KGMBindPoseCtrl+"."+KGMBindPoseAttrt="hairSystem"):\n                pass\n            elif ("scale" in KGMBindPoseAttr) and (cmds.getAttr(KGMBindPoseCtrl+"."+KGMBindPoseAttr, k=True)) or ("visibility" in KGMBindPoseAttr) and (cmds.getAttr(KGMBindPoseCtrl+"."+KGMBindPoseAttr, k=True) ):\n                cmds.setAttr(KGMBindPoseCtrl + "." + KGMBindPoseAttr, 1)\n            elif( cmds.getAttr(KGMBindPoseCtrl + "." + KGMBindPoseAttr, k=True) ):\n                cmds.setAttr(KGMBindPoseCtrl + "." + KGMBindPoseAttr, 0)\n\ndef KGMSetMirrorPose(KGMMirrorCtrl, KGMMirrorOption, *args):\n    # String or String List\n    KGMMirrorTarget         = cmds.listConnections(KGMMirrorCtrl+".MirrorTarget")\n    KGMBindPoseCtrlAttrList = cmds.listAttr(KGMMirrorCtrl, k=True, u=True, m=True, sa=True)\n    KGMMirrorAttrList       = []\n    KGMMirrorDirection      = ["Center","Right","Left"]\n    # Vector\n    MirrorTranslateValue    = cmds.getAttr(KGMMirrorCtrl+".MirrorTranslate") \n    MirrorRotateValue       = cmds.getAttr(KGMMirrorCtrl+".MirrorRotate") \n    MirrorTranslate         = OM.MVector(MirrorTranslateValue[0][0] , MirrorTranslateValue[0][1], MirrorTranslateValue[0][2])\n    MirrorRotate            = OM.MVector(MirrorRotateValue[0][0]    , MirrorRotateValue[0][1]   , MirrorRotateValue[0][2]   )\n    # Float\n    KGMCtrlAttrValue        = []\n    # Int\n    KGMMirrorAttrChk        = 0\n    KGMMirrorAttrMax        = 0\n    # Temp\n    #KGMMirrorAttr           = ""\n    #KGMRigMenuList          = cmds.listConnections(KGMMirrorCtrl + ".KGMRigMenuItem")\n    #KGMBindPoseAttr         = ""\n    \n    if cmds.attributeQuery("MirrorCenter", node = KGMMirrorCtrl, ex=True):\n        KGMMirrorAttrChk=1\n    elif cmds.attributeQuery("MirrorRight", node = KGMMirrorCtrl, ex=True):\n        KGMMirrorAttrChk=2\n    elif cmds.attributeQuery("MirrorLeft", node = KGMMirrorCtrl, ex=True):\n        KGMMirrorAttrChk=3\n\n    KGMArray = 0\n    if KGMMirrorAttrChk > 0:\n        KGMMirrorAttrMax = cmds.listConnections(KGMMirrorCtrl + ".Mirror" + KGMMirrorDirection[KGMMirrorAttrChk-1])\n        if KGMMirrorAttrMax != None:\n            KGMMirrorAttrMax = len( cmds.listConnections(KGMMirrorCtrl + ".Mirror" + KGMMirrorDirection[KGMMirrorAttrChk-1]) )\n            for KGMArray in range(KGMMirrorAttrMax):\n                KGMMirrorAttrList[KGMArray]=cmds.connectionInfo( KGMMirrorCtrl + ".Mirror" + KGMMirrorDirection[KGMMirrorAttrChk-1][KGMArray] , sfd = True)      \n    KGMArray = 0\n    for KGMBindPoseAttr in KGMBindPoseCtrlAttrList:\n        KGMCtrlAttrValue.append(cmds.getAttr(KGMMirrorCtrl+"."+KGMBindPoseAttr))\n        if "translateX" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorTranslate.x == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorTranslate.x\n        elif "translateY" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorTranslate.y == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorTranslate.y\n        elif "translateZ" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorTranslate.z == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorTranslate.z\n        elif "rotateX" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorRotate.x == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorRotate.x\n        elif "rotateY" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorRotate.y == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorRotate.y\n        elif "rotateZ" in KGMBindPoseAttr:\n            if KGMMirrorTarget[0] in KGMMirrorCtrl and KGMMirrorOption > 1:\n                if MirrorRotate.z == -1:\n                    KGMCtrlAttrValue[KGMArray] = 0\n            else:\n                KGMCtrlAttrValue[KGMArray] *= MirrorRotate.z\n        KGMArray += 1\n\n    if (KGMMirrorOption == 1) and (KGMMirrorTarget[0] not in KGMMirrorCtrl):\n        for KGMBindPoseAttr in KGMBindPoseCtrlAttrList:\n            KGMCtrlAttrValue.append(cmds.getAttr(KGMMirrorTarget[0]+"."+KGMBindPoseAttr))\n            if "translateX" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorTranslate.x\n            elif "translateY" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorTranslate.y\n            elif "translateZ" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorTranslate.z\n            elif "rotateX" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorRotate.x\n            elif "rotateY" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorRotate.y\n            elif "rotateZ" in KGMBindPoseAttr:\n                KGMCtrlAttrValue[KGMArray]*=MirrorRotate.z\n            KGMArray += 1   \n            \n    if(KGMMirrorAttrChk > 0):\n        for KGMMirrorAttr in KGMMirrorAttrList:\n            KGMCtrlAttrValue[KGMArray]=cmds.getAttr(KGMMirrorAttr)\n            KGMArray += 1\n    \n    KGMArray = 0       \n    for KGMBindPoseAttr in KGMBindPoseCtrlAttrList:\n        if cmds.getAttr( KGMMirrorTarget[0]+"."+KGMBindPoseAttr, k=True):\n            cmds.setAttr( KGMMirrorTarget[0]+"."+KGMBindPoseAttr,  KGMCtrlAttrValue[KGMArray])\n        KGMArray += 1\n\n    if KGMMirrorOption==1 and KGMMirrorTarget[0] not in KGMMirrorCtrl: \n        for KGMBindPoseAttr in KGMBindPoseCtrlAttrList:\n            cmds.setAttr(KGMMirrorCtrl+"."+KGMBindPoseAttr, KGMCtrlAttrValue[KGMArray])\n            KGMArray +=1  \n\n    if KGMMirrorAttrChk>0 and KGMMirrorAttrMax != None:\n        KGMMirrorAttrChk=0\n        for KGMMirrorAttrChk in range(KGMMirrorAttrMax)/2:\n            if KGMMirrorOption==1:\n                if KGMMirrorAttrList[(KGMMirrorAttrChk*2)+1] in KGMMirrorAttrList[KGMMirrorAttrChk*2] :\n                    cmds.setAttr(KGMMirrorAttrList[KGMMirrorAttrChk*2], KGMCtrlAttrValue[KGMArray+(KGMMirrorAttrChk*2)+1]*-1)\n                else:\n                    cmds.setAttr(KGMMirrorAttrList[KGMMirrorAttrChk*2], KGMCtrlAttrValue[KGMArray+(KGMMirrorAttrChk*2)+1])\n                    cmds.setAttr(KGMMirrorAttrList[(KGMMirrorAttrChk*2)+1], KGMCtrlAttrValue[KGMArray+(KGMMirrorAttrChk*2)])\n            if KGMMirrorOption==2:\n                if KGMMirrorAttrList[(KGMMirrorAttrChk*2)+1] in KGMMirrorAttrList[KGMMirrorAttrChk*2] :\n                    cmds.setAttr(KGMMirrorAttrList[KGMMirrorAttrChk*2], 0)\n                else:\n                    cmds.setAttr(KGMMirrorAttrList[KGMMirrorAttrChk*2], KGMCtrlAttrValue[KGMArray+(KGMMirrorAttrChk*2)+1])\n            if KGMMirrorOption==3:\n                if KGMMirrorAttrList[(KGMMirrorAttrChk*2)+1] in KGMMirrorAttrList[KGMMirrorAttrChk*2] :\n                    cmds.setAttr(KGMMirrorAttrList[KGMMirrorAttrChk*2]+1, 0)\n                else:\n                    cmds.setAttr(KGMMirrorAttrList[(KGMMirrorAttrChk*2)+1], KGMCtrlAttrValue[KGMArray+(KGMMirrorAttrChk*2)])\n            KGMMirrorAttrChk += 1        \n\ndef KGMMirrorSet(KGMNode, KGMPart, KGMOption, *args):\n\n    KGMAttrList = cmds.listAttr(KGMNode, ud=True)\n    KGMAttrConnectionList = []\n    KGMMirrorTarget = []\n   \n    for KGMAttr in KGMAttrList:\n        KGMAttrConnectionList = cmds.listConnections(KGMNode+"."+KGMAttr)\n        if KGMAttrConnectionList == None :\n            KGMAttrConnectionList = [] \n        for KGMCtrl in KGMAttrConnectionList:\n            if "All" in KGMPart:\n                if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Fly" in KGMPart and not "All" in KGMAttr:\n                if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Body" in KGMPart and not "All" in KGMAttr and not "Fly" in KGMAttr: \n                if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)   \n            elif "Arms" in KGMPart:  \n                if "Arm" in KGMAttr or "Finger" in KGMAttr:\n                    if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n                    elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Fingers" in KGMPart:  \n                if "Finger" in KGMAttr:\n                    if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n                    elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Legs" in KGMPart:  \n                if "Leg" in KGMAttr or "Toe" in KGMAttr:\n                    if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n                    elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Toes" in KGMPart:  \n                if "Toe" in KGMAttr:\n                    if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n                    elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif "Head" in KGMPart:  \n                if "Head" in KGMAttr or "Facial" in KGMAttr :#or "Hair" in KGMAttr:\n                    if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n                    elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                        KGMSetMirrorPose(KGMCtrl, KGMOption)\n            elif KGMAttr in KGMPart:  \n                if KGMOption<3 and not cmds.attributeQuery("MirrorLeft", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node=KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n    \n    if "Selected" in KGMPart:\n        KGMAttrConnectionList = cmds.ls(sl=True)\n        for KGMCtrl in KGMAttrConnectionList:\n            if cmds.attributeQuery("KGMRigMenuItem", node = KGMCtrl, ex=True):\n                KGMMirrorTarget=cmds.listConnections(KGMCtrl+".MirrorTarget")\n                if KGMOption==2 and not cmds.attributeQuery("MirrorLeft", node = KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==3 and not cmds.attributeQuery("MirrorRight", node = KGMCtrl, ex=True):\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==1 and KGMCtrl == KGMMirrorTarget[0]:\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n                elif KGMOption==1 and KGMCtrl != KGMMirrorTarget[0]:\n                    KGMAttrConnectionList = set(KGMMirrorTarget) - set(KGMAttrConnectionList)\n                    KGMAttrConnectionList = list(KGMAttrConnectionList)\n                    KGMSetMirrorPose(KGMCtrl, KGMOption)\n\ndef KGMHairBakeCmd(KGMBakeNode,BakeChk, *args):\n    pass\n\ndef KGMIKFKAttrTimeShiftKey(KGMNode, KGMIKFKValue, *args):\n    # String \n    KGMIKFKAttr         = cmds.connectionInfo (KGMNode+".IKFKAttr"   , sfd=True)\n    KGMIKCtrl           = cmds.listConnections(KGMNode+".IKCtrlList")\n    KGMFKCtrl           = cmds.listConnections(KGMNode+".FKCtrlList")\n    KGMIKCtrlAttr       = []\n    #Float\n    KGMKeyFrame         = cmds.currentTime(q=True)\n    KGMFindKeyFrame     = []\n    KGMPreviousKeyFrame = 0.0\n    #Int\n    KGMKeyFrameChk      = 0\n    \n    # IK => FK\n    if KGMIKFKValue:\n        for KGMArry in range(len(KGMIKCtrl)):\n            KGMIKCtrlAttr.append( cmds.connectionInfo(KGMNode+".IKCtrlList[%i]" %KGMArry, sfd=True) )\n        \n        KGMAttrChkList = ["tx", "ty", "tz", "rx", "ry", "rz"]\n        for attr in KGMIKCtrlAttr:\n            KGMAttrChkList.append(attr.partition(".")[2])\n        \n        for KGMAttrChk in KGMAttrChkList:\n            if cmds.keyframe(KGMIKCtrl[0]+"."+KGMAttrChk, q=True, kc=True):\n                KGMFindKeyFrame.append(cmds.findKeyframe( KGMIKCtrl[0]+"."+KGMAttrChk, t=(KGMKeyFrame,KGMKeyFrame), w ="previous"))\n                KGMKeyFrameChk = 1\n        \n        for KGMArry in range(len(KGMFindKeyFrame)):\n            if KGMPreviousKeyFrame < KGMFindKeyFrame[KGMArry]:\n                KGMPreviousKeyFrame = KGMFindKeyFrame[KGMArry]\n        \n        if KGMKeyFrameChk:\n            cmds.setKeyframe(KGMIKFKAttr)\n            cmds.currentTime(KGMPreviousKeyFrame, u=True)\n            if cmds.getAttr(KGMIKFKAttr) > 0.5:\n                cmds.setAttr(KGMIKFKAttr, 1)\n            else:\n                cmds.setAttr(KGMIKFKAttr, 0)\n            cmds.currentTime(KGMKeyFrame, u=True)\n        KGMIKFKSwitch(KGMNode, 1)\n    \n    #FK => IK\n    else:\n        KGMAttrChkList = ["tx", "ty", "tz", "rx", "ry", "rz", "sx"]\n        for FKCtrl in KGMFKCtrl:\n            for KGMAttrChk in KGMAttrChkList:\n                if cmds.keyframe(FKCtrl+"."+KGMAttrChk, q=True, kc=True):\n                    KGMFindKeyFrame.append( cmds.findKeyframe(FKCtrl+"."+KGMAttrChk,  t = (KGMKeyFrame, KGMKeyFrame), w = "previous") )\n                    KGMKeyFrameChk = 1\n                    \n        for KGMArry in range(len(KGMFindKeyFrame)):\n            if KGMPreviousKeyFrame < KGMFindKeyFrame[KGMArry]:\n                KGMPreviousKeyFrame = KGMFindKeyFrame[KGMArry]\n        \n        if KGMKeyFrameChk:\n            cmds.setKeyframe(KGMIKFKAttr)\n            cmds.currentTime(KGMPreviousKeyFrame, u=True)\n            if cmds.getAttr(KGMIKFKAttr) > 0.5:\n                cmds.setAttr(KGMIKFKAttr, 1)\n            else:\n                cmds.setAttr(KGMIKFKAttr, 0)\n            cmds.currentTime(KGMKeyFrame, u=True)\n        KGMIKFKSwitch(KGMNode, 0)\n           \ndef KGMIKFKSwitch (KGMNode, KGMIKFKValue, *args):\n    # String\n    KGMIKFKAttr         = cmds.connectionInfo(KGMNode+".IKFKAttr", sfd=True)\n    KGMSwitchTarget     = cmds.listConnections(KGMNode+".Target")\n    KGMIKCtrlUserAttr   = []\n    KGMIKCtrlCrtAttr    = ""\n    KGMIKCtrl           = cmds.listConnections(KGMNode+".IKCtrlList")\n    KGMIKCtrlAttr       = []\n    KGMFKCtrl           = cmds.listConnections(KGMNode+".FKCtrlList")\n    # Vector\n    KGMTranslateValue   = OM.MVectorArray()\n    KGMCenterValue      = OM.MVectorArray()\n    KGMRotateValue      = OM.MVectorArray()\n    KGMVectorValue      = OM.MVector()\n    # Float\n    KGMOriLength = []\n    KGMCrtLength = []\n    KGMTwistAngle       = OM.MAngle()\n    KGMGetValue = 0.0\n    # Int\n    #KGMSubArray = 0\n    KGMTwistReverse = 0\n    \n    if KGMIKFKValue:\n        for KGMArray in range(3):\n            KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray], q=True, ws=True, rp=True )\n            KGMTranslateValue.append( KGMVectorValue )\n            KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray], q=True, os=True, rp=True )\n            KGMCenterValue.append( KGMVectorValue )\n            KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray], q=True, ws=True, ro=True )\n            KGMRotateValue.append( KGMVectorValue )\n            if cmds.getAttr(KGMFKCtrl[KGMArray]+".s")[0] != (1.0, 1.0, 1.0):\n                cmds.setAttr(KGMFKCtrl[KGMArray]+".s", 1.0, 1.0, 1.0)\n        \n        for KGMArray in range(3, len(KGMFKCtrl)):\n            if len(KGMFKCtrl[KGMArray]) and len(KGMSwitchTarget[KGMArray+1]):\n                KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray+1], q=True, ws=True, rp=True )\n                KGMTranslateValue.append( KGMVectorValue )\n                KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray+1], q=True, os=True, rp=True )\n                KGMCenterValue.append( KGMVectorValue )\n                KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[KGMArray+1], q=True, ws=True, ro=True )\n                KGMRotateValue.append( KGMVectorValue )\n                if cmds.getAttr(KGMFKCtrl[KGMArray]+".s")[0] != (1.0, 1.0, 1.0):\n                    cmds.setAttr(KGMFKCtrl[KGMArray]+".s", 1.0, 1.0, 1.0)\n        cmds.setAttr(KGMIKFKAttr, KGMIKFKValue)\n        \n        for KGMArray in range(3):\n                KGMVectorValue = KGMTranslateValue[KGMArray]\n                cmds.xform(KGMFKCtrl[KGMArray], ws=True, t = (KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z))\n                KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.getAttr( KGMFKCtrl[KGMArray]+".t" )[0]\n                KGMTranslateValue.set(KGMVectorValue,KGMArray) \n                KGMTranslateValue.set( KGMTranslateValue[KGMArray]-KGMCenterValue[KGMArray],KGMArray) \n                KGMVectorValue = KGMTranslateValue[KGMArray]\n                cmds.setAttr(KGMFKCtrl[KGMArray]+".t", KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z)\n                KGMVectorValue = KGMRotateValue[KGMArray]\n                cmds.xform(KGMFKCtrl[KGMArray], ws=True, ro = (KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z))\n        \n        for KGMArray in range(3,len(KGMFKCtrl)):\n            if len(KGMFKCtrl[KGMArray]) and len(KGMSwitchTarget[KGMArray+1]):\n                if not cmds.getAttr(KGMFKCtrl[KGMArray]+".tx", l=True) and not cmds.getAttr(KGMFKCtrl[KGMArray]+".ty", l=True) and not cmds.getAttr(KGMFKCtrl[KGMArray]+".tz", l=True):\n                    KGMVectorValue = KGMTranslateValue[KGMArray]\n                    cmds.xform(KGMFKCtrl[KGMArray], ws=True, t = (KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z))\n                    KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.getAttr( KGMFKCtrl[KGMArray]+".t" )[0]\n                    KGMTranslateValue.set(KGMVectorValue,KGMArray) \n                    KGMTranslateValue.set( KGMTranslateValue[KGMArray]-KGMCenterValue[KGMArray],KGMArray) \n                    KGMVectorValue = KGMTranslateValue[KGMArray]\n                    cmds.setAttr(KGMFKCtrl[KGMArray]+".t", KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z)\n                if not cmds.getAttr(KGMFKCtrl[KGMArray]+".rx", l=True) and not cmds.getAttr(KGMFKCtrl[KGMArray]+".ry", l=True) and not cmds.getAttr(KGMFKCtrl[KGMArray]+".rz", l=True):\n                #if not cmds.getAttr(KGMFKCtrl[KGMArray]+".rx") and not cmds.getAttr(KGMFKCtrl[KGMArray]+".ry") and not cmds.getAttr(KGMFKCtrl[KGMArray]+".rz"):\n                    KGMVectorValue = KGMRotateValue[KGMArray]\n                    cmds.xform(KGMFKCtrl[KGMArray], ws=True, ro = (KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z))\n    # FK => IK\n    else:\n        if cmds.getAttr(KGMNode+".TwistReverse"):\n            KGMTwistReverse = -1\n        else :\n            KGMTwistReverse = 1\n            \n        for KGMArray in range(9):\n            KGMTranslateValue.append(OM.MVector())\n        for KGMArray in range(2):\n            KGMRotateValue.append(OM.MVector())\n        for KGMArray in range(2):\n            KGMCenterValue.append(OM.MVector())\n        for KGMArray in range(len(KGMIKCtrl)):\n            KGMIKCtrlAttr.append( cmds.connectionInfo(KGMNode+".IKCtrlList[%i]" %KGMArray, sfd=True))\n        KGMIKCtrlUserAttr = cmds.listAttr(KGMIKCtrl[0], ud=True, k=True)\n        KGMIKCtrlUserAttr = [x for x in KGMIKCtrlUserAttr if x != "Squash" and x !=\'Follow\' and x !=\'Stretch\']\n        \n        for KGMIKCtrlCrtAttr in KGMIKCtrlUserAttr:\n            cmds.setAttr(KGMIKCtrl[0]+"."+KGMIKCtrlCrtAttr, 0)\n        \n        for KGMArray in range(4, len(KGMIKCtrl),3):\n            if len(KGMIKCtrlAttr[KGMArray]) and len(KGMIKCtrlAttr[KGMArray+1]) and len(KGMIKCtrlAttr[KGMArray+2]):\n                KGMGetValue  = cmds.getAttr(KGMIKCtrlAttr[KGMArray+1])\n                KGMGetValue *= cmds.getAttr(KGMIKCtrlAttr[KGMArray+2])\n                if not cmds.getAttr(KGMIKCtrlAttr[KGMArray+1], l=True) and cmds.getAttr(KGMIKCtrlAttr[KGMArray+1], k=True):\n                    cmds.setAttr(KGMIKCtrlAttr[KGMArray+1], 0)\n                if not cmds.getAttr(KGMIKCtrlAttr[KGMArray+2], l=True) and cmds.getAttr(KGMIKCtrlAttr[KGMArray+2], k=True):\n                    cmds.setAttr(KGMIKCtrlAttr[KGMArray+2], 0)\n                cmds.setAttr(KGMIKCtrlAttr[KGMArray], KGMGetValue)\n        \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 0 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[0], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 1 )\n        KGMTranslateValue.set( KGMTranslateValue[0]-KGMTranslateValue[1] , 0)\n        KGMCrtLength.append( KGMTranslateValue[0].length() )\n        \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 1 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 2 )\n        KGMTranslateValue.set( KGMTranslateValue[1]-KGMTranslateValue[2] , 1)\n        KGMCrtLength.append( KGMTranslateValue[1].length() )\n        \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[0], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 2 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )\n        KGMTranslateValue.set( KGMVectorValue, 3 )\n        KGMTranslateValue.set( KGMTranslateValue[2]-KGMTranslateValue[3] , 2) \n\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set(KGMVectorValue, 3)\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, os=True, rp=True )    \n        KGMCenterValue.set(KGMVectorValue, 0)\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, ws=True, ro=True )    \n        KGMRotateValue.set(KGMVectorValue, 0)\n        \n        KGMVectorValue = KGMTranslateValue[3]\n        cmds.xform( KGMIKCtrl[0], ws=True, t = (KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z) )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.getAttr( KGMIKCtrl[0] + ".t")[0]\n        KGMTranslateValue.set( KGMVectorValue, 3 )\n        KGMTranslateValue.set( KGMTranslateValue[3] - KGMCenterValue[0] , 3 )\n        KGMVectorValue = KGMTranslateValue[3]\n        cmds.setAttr( KGMIKCtrl[0] + ".t", KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z )\n        KGMVectorValue = KGMRotateValue[0]\n        cmds.xform( KGMIKCtrl[0], ws=True, ro = ( KGMVectorValue.x, KGMVectorValue.y, KGMVectorValue.z ))\n        cmds.setAttr( KGMIKFKAttr, KGMIKFKValue)\n       \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 4 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[0], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 5 )\n        KGMTranslateValue.set( KGMTranslateValue[4]-KGMTranslateValue[5] , 4)\n        KGMOriLength.append( KGMTranslateValue[4].length())\n        \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 5 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 6 )\n        KGMTranslateValue.set( KGMTranslateValue[5]-KGMTranslateValue[6] , 5)\n        KGMOriLength.append( KGMTranslateValue[5].length())\n        \n        cmds.setAttr(KGMIKCtrlAttr[2], (((KGMCrtLength[0]/KGMOriLength[0])-1)*10))\n        cmds.setAttr(KGMIKCtrlAttr[3], (((KGMCrtLength[1]/KGMOriLength[1])-1)*10))\n               \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 6 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[0], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 7 )\n        KGMTranslateValue.set( KGMTranslateValue[6]-KGMTranslateValue[7] , 6)\n        \n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[3], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 7 )\n        KGMVectorValue.x,KGMVectorValue.y,KGMVectorValue.z = cmds.xform( KGMSwitchTarget[1], q=True, ws=True, rp=True )    \n        KGMTranslateValue.set( KGMVectorValue, 8 )\n        KGMTranslateValue.set( KGMTranslateValue[7]-KGMTranslateValue[8] , 7)\n        \n        KGMRotateValue.set( KGMTranslateValue[0]^KGMTranslateValue[1] , 0 )\n        KGMRotateValue.set( KGMTranslateValue[6]^KGMTranslateValue[7] , 1 )\n        KGMTwistAngle.setValue(KGMRotateValue[0].angle(KGMRotateValue[1]))\n\n        KGMCenterValue.set( KGMTranslateValue[1]+KGMTranslateValue[2] ,0 )\n        \n        KGMRotateValue[1].normalize()\n        KGMRotateValue[0].normalize()\n        \n        if KGMRotateValue[1]*KGMRotateValue[0] > 0:\n            cmds.setAttr(KGMIKCtrlAttr[0], KGMTwistAngle.asDegrees() * KGMTwistReverse)\n        else:\n            cmds.setAttr(KGMIKCtrlAttr[0], -KGMTwistAngle.asDegrees() * KGMTwistReverse)' 
            melScript ='global proc AEbeforeScriptFieldUpdate(string $attrName)\n{\n\tstring $NodeName[]=stringToStringArray($attrName,".");\n\tif(`attributeExists KGMScriptProtector $NodeName[0]`){\n\t\ttextField -e -tx "KGM Rigging System By Guen-Mo Kim(hybrid0815@gmail.com)" beforeScriptField;\n\t}else{\n\t\tstring $script = `getAttr $attrName`;\n\t\ttextField -e -tx $script beforeScriptField;\n\t};\n};\n\nglobal proc string[] EEgetCurrTypeList(string $currType)\n{\n\tstring $nodeList[];\n\n\tswitch($currType)\n\t{\n\t\tcase "allSelected": $nodeList = `ls -selection`;\n\t\t\t\t\t\t\tbreak;\n\t\tcase "dagObjects":\t$nodeList = `ls -dagObjects`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "geometry":\t$nodeList = `ls -geometry`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "transforms":\t$nodeList = `ls -transforms`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "lights":\t\t$nodeList = `ls -lights`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "cameras":\t\t$nodeList = `ls -cameras`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "shaders":\t\t$nodeList = `ls -materials`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "depNodes":\t$nodeList = `ls -dependencyNodes`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "joints":\t\t$nodeList = `ls -type joint`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "handles":\t\t$nodeList = `ls -type ikHandle`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "ikSystems":\t$nodeList = `ls -type ikSystem`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "ikSolvers":\t$nodeList = `ls -type ikSolver`;\n\t\t\t\t\t\t\tbreak;\n\t\tcase "jointLattice":$nodeList = `ls -type jointLattice`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "blendShape":\t$nodeList = `ls -type blendShape`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "boneLattice": $nodeList = `ls -type boneLattice`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "cluster":\t\t$nodeList = `ls -type cluster`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "lattice":\t\t$nodeList = `ls -type ffd`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "sculpt":\t\t$nodeList = `ls -type sculpt`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "wire":\t\t$nodeList = `ls -type wire`;\t\n\t\t\t\t\t\t\tbreak;\n\t\tcase "scriptNode":\t$nodeList = `ls -type script`;\n\t\t\t\t\t\t\t//KGMScriptProtect\n\t\t\t\t\t\t\tint $Num,$Chk=0;\n\t\t\t\t\t\t\tfor($Num=0;$Num<size($nodeList);){\n\t\t\t\t\t\t\t\tif(`attributeExists KGMScriptProtector $nodeList[$Num]`&&$Chk==0){$nodeList[$Num]="By Guen Mo Kim";$Chk=1;}\n\t\t\t\t\t\t\t\telse if(`attributeExists KGMScriptProtector $nodeList[$Num]`&&$Chk==1){$nodeList[$Num]="hybrid0815@gmail_com";};\n\t\t\t\t\t\t\t\t$Num++;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t//KGMScriptProtect\n\t\t\t\t\t\t\tbreak;\n\t}\n\tif (`isTrue "DynamicsUIExists"`)\n\t{\n\t\tswitch($currType)\n\t\t{\n\t\t\tcase "particles":\t$nodeList = `ls -type particle`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "emitters":\t$nodeList = `ls -type pointEmitter`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "springs":\t\t$nodeList = `ls -type spring`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "gravity":\t\t$nodeList = `ls -type gravityField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "drag":\t\t$nodeList = `ls -type dragField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "air":\t\t\t$nodeList = `ls -type airField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "newton":\t\t$nodeList = `ls -type newtonField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "radial":\t\t$nodeList = `ls -type radialField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "turbulence":\t$nodeList = `ls -type turbulenceField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "uniform":\t\t$nodeList = `ls -type uniformField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "vortex":\t\t$nodeList = `ls -type vortexField`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "rigidBody":\t$nodeList = `ls -type rigidBody`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t\tcase "constraint":\t$nodeList = `ls -type rigidConstraint`;\t\n\t\t\t\t\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $nodeList;\n\n}\n\nproc optionalDagMenuProc( string $parent, string $item )\n{\n\t// Look at the shape child of this object\n\t//\n\tstring $object[] = `listRelatives -path -s $item`;\n\n\tstring $shape = "";\n\tint $gotVisible = 0;\n\n\tif( size($object) < 1 ) return;\n\n\tfor( $i=0; $i<size($object); $i+=1) {\n\t\tif( (0 == getAttr($object[$i] + ".io")) &&\n\t\t\tgetAttr($object[$i] + ".v") ) {\n\t\t\t$shape = $object[$i];\n\t\t\t$gotVisible = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif( !$gotVisible ) {\n\t\tfor( $i=0; $i<size($object); $i+=1) {\n\t\t\tif( 0 == getAttr($object[$i] + ".io")) {\n\t\t\t\t$shape = $object[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( "" != $shape ) {\n\t\tstring $nt = `nodeType $shape`;\n\t\tswitch( $nt ) {\n\t\t  case "subdiv":\n\t\t\tsubdOptionalDagMenuProc( $parent, $item );\n\t\t\tmenuItem -d true; \n\t\t\tbreak;\n\n\t\t  default:\n\t\t\t// Check to make sure we have a kPlugin prefix\n\t\t\tstring $apiNt = `nodeType -api $shape`;\n\t\t\tif ( startsWith( $apiNt, "kPlugin" ) ) {\n\t\t\t\tstring $nodeMenuCommand = $nt + "DagMenuProc";\n\t\t\t\tstring $nodeMenuCommandWithArgs = $nodeMenuCommand + "(" + $parent + " , " + $item + " )";\n\t\t\t\tif ( exists( $nodeMenuCommand ) ) {\n\t\t\t\t   eval( $nodeMenuCommandWithArgs );\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nglobal proc dagMenuProc(string $parent, string $object)\n{\t\nif(attributeExists("KGMRigMenuItem",$object)) {\n\tpython( "KGMRigMenu(\'" + $parent +"\',\'" + $object +"\')" );\n}else{\n\n\tglobal string $artSelectObject ;\n\tstring $mode = "";\n\n\tif (`optionVar -exists currentMenuBarTab`) {\n\t\t$mode = `optionVar -q currentMenuBarTab`;\n\t} else {\n\t\toptionVar -sv currentMenuBarTab $mode;\n\t}\n\t\n\tif (($object == "CubeCompass"))\n\t{\n\t\tcreateViewCubeMenuItems($parent);\n\t\treturn;\n\t}\n\n\tif (`popupMenu -e -exists $parent`) {\n\t\tsetParent -m $parent;\n\t\t\n\t\tstring  $currContext = `currentCtx`;\t\t\n\t\tif ( $currContext == "artAttrSkinContext" )\n\t\t{\n\t\t\tcreateSelectMenuItems($parent, $object);\n\t\t\t\n\t\t\tstring $shortName = `substitute ".*|" $object ""`;\n\t\t\tmenuItem -label ($shortName + "...") -c ("showEditor "+$object);\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\n\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuGotoBindPose")) -c "gotoBindPose";\n\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuSelect"))  -c ("select -r " + $object);\n\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuAddToSelection")) -c ("select -add " + $object);\n\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuSelectHierarchy"))  -c ("select -hierarchy " + $object);\n\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\t\t\t\n\t\t\tstring $activePanel = `getPanel -wf`;\n\t\t\tint $currentXrayValue = `modelEditor -q -jointXray $activePanel`;\n\t\t\t$xrayJointCB = `menuItem -subMenu false -cb $currentXrayValue  -c "skinPaintXrayJoints;" -label (uiRes("m_dagMenuProc.kDagMenuXRayJoints")) xrayJointsCB`;  \n\t\t\tsetParent -m $parent;\n\t\t\t\n\t\t\tint $currentIsolateValue = `isolateSelect -q -state $activePanel`;\n\t\t\t$isolateParent = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kDagMenuIsolate"))`;\n\t\t\t\t\t\t\t\tmenuItem -subMenu false -cb $currentIsolateValue  -c "getActiveModelPanel;" -label (uiRes("m_dagMenuProc.kDagMenuIsolateSelected")) $isolateParent;\n\t\t\t\t\t\t\t\tmenuItem -subMenu false -label (uiRes("m_dagMenuProc.kDagMenuAddObject")) -c "addSelectedToIsolation;" $isolateParent;\t\t\t\t\t\t\t\t\t\t\n\t\t\tsetParent -m $parent;\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\t\t\t\n\t\t\tint $artAttrUseColorRamp = `checkBoxGrp -q -value1 artisanRampUseRamp`;\n\t\t\t$colorRampCB = `menuItem -subMenu false -cb $artAttrUseColorRamp  -c "skinPaintUseColorFeedback;" -label (uiRes("m_dagMenuProc.kDagMenuUseColorRamp")) useColorFeedbackCB`;\n\t\t\t$paintModeParent = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kDagMenuPaintMode")) $parent`;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuPaintModeAdd")) -c "artAttrPaintOperation artAttrSkinPaintCtx Add;" $paintModeParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuPaintModeReplace")) -c "artAttrPaintOperation artAttrSkinPaintCtx Replace;" $paintModeParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuPaintModeScale")) -c "artAttrPaintOperation artAttrSkinPaintCtx Scale;" $paintModeParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuPaintModeSmooth")) -c "artAttrPaintOperation artAttrSkinPaintCtx Smooth;" $paintModeParent;\n\t\t\t\n\t\t\tsetParent -m $parent;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t$brushParent = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kDagMenuBrushProfile")) $parent`;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushProfileHard")) $brushParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushProfileSoft")) $brushParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushProfileGaussian")) $brushParent;\n\t\t\t\t\t\n\t\t\tsetParent -m $parent;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t$valueParent = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kDagMenuBrushValue")) $parent`;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue0")) -c "artSkinSetSelectionValue 0.000 false artAttrSkinPaintCtx artAttrSkin;" $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue1")) -c "artSkinSetSelectionValue 0.100 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue2")) -c "artSkinSetSelectionValue 0.200 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue3")) -c "artSkinSetSelectionValue 0.300 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue4")) -c "artSkinSetSelectionValue 0.400 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue5")) -c "artSkinSetSelectionValue 0.500 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue6")) -c "artSkinSetSelectionValue 0.600 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue7")) -c "artSkinSetSelectionValue 0.700 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue8")) -c "artSkinSetSelectionValue 0.800 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue9")) -c "artSkinSetSelectionValue 0.900 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuBrushValue10")) -c "artSkinSetSelectionValue 1.000 false artAttrSkinPaintCtx artAttrSkin;"  $valueParent;\t\t\n\t\t\t\t\t\t\t\t\n\t\t\tsetParent -m $parent;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t$opacityParent = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kDagMenuOpacity")) $parent`;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue0")) -c "artAttrSkinPaintCtx -e -opacity 0.000 `currentCtx`" $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue1")) -c "artAttrSkinPaintCtx -e -opacity 0.100 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue2")) -c "artAttrSkinPaintCtx -e -opacity 0.200 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue3")) -c "artAttrSkinPaintCtx -e -opacity 0.300 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue4")) -c "artAttrSkinPaintCtx -e -opacity 0.400 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue5")) -c "artAttrSkinPaintCtx -e -opacity 0.500 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue6")) -c "artAttrSkinPaintCtx -e -opacity 0.600 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue7")) -c "artAttrSkinPaintCtx -e -opacity 0.650 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue8")) -c "artAttrSkinPaintCtx -e -opacity 0.750 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue9")) -c "artAttrSkinPaintCtx -e -opacity 0.850 `currentCtx`"  $opacityParent;\n\t\t\t\t\t\t\t\tmenuItem -label (uiRes("m_dagMenuProc.kDagMenuOpacityValue10")) -c "artAttrSkinPaintCtx -e -opacity 1.000 `currentCtx`"  $opacityParent;\t\t\t\t\t\t\t\n\t\t\t\n\t\t\tsetParent -m $parent;\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t$mirrorWeightsParent = `menuItem -subMenu false -c "MirrorSkinWeights" -label (uiRes("m_dagMenuProc.kDagMenuMirrorSkinWeights"))`;\n\t\t\t$mirroWeightsOB = `menuItem -subMenu false -ob true -c "MirrorSkinWeightsOptions" $mirrorWeightsParent`;\n\t\t\t\n\t\t\t$copyWeightsParent = `menuItem -subMenu false -c "CopySkinWeights" -label (uiRes("m_dagMenuProc.kDagMenuCopySkinWeights"))`;\n\t\t\t$copyWeightsOB = `menuItem -subMenu false -ob true -c "CopySkinWeightsOptions" $copyWeightsParent`;\n\t\t\t\n\t\t\t$pruneWeightsParent = `menuItem -subMenu false -c "PruneSmallWeights" -label (uiRes("m_dagMenuProc.kDagMenuPruneSmallWeights"))`;\n\t\t\t$pruneWeightsOB = `menuItem -subMenu false -ob true -c "PruneSmallWeightsOptions" $pruneWeightsParent`;\t\t\t\n\t\t\t\n\t\t\tmenuItem -subMenu false -c "removeUnusedInfluences" -label (uiRes("m_dagMenuProc.kDagMenuRemoveUnusedInfluences"));\n\t\t\t\n\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\n\t\t\t\n\t\t\tstring $menu = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kDagMenuInputs")) `;\n\t\t\t\t\t\t\tmenu -e \n\t\t\t\t\t\t\t\t-pmc ( "createHistoryMenuItems "+$menu+" "+$object ) $menu;\n\t\t\tsetParent -m $parent;\n\n\t\t\t$menu = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kDagMenuOutputs")) `;\n\t\t\t\t\tmenu -e -pmc ( "createFutureMenuItems "+$menu+" "+$object ) $menu;\n\t\t\tsetParent -m $parent;\n\t\t\t\n\t\t\tmenuItem -divider true;\n\t\t\tmenuItem -divider true;\t\t\t\t\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\n\t\t    // label the object\n\t\t    string $shortName = `substitute ".*|" $object ""`;\n\t\t    menuItem -label ($shortName + "...") -c ("showEditor "+(`longNameOf $object`));\n\t\t    menuItem -divider true;\n\t\t    menuItem -divider true;\n\n\t\t    // Create the list of selection masks\n\t\t    createSelectMenuItems($parent, $object);\n\n\t\t    menuItem -d true;\n\t\tmenuItem -l "Toggle Frame Counter" -c KGMFrameCounter;\n\t\tmenuItem -d 1;\n\n\t\tmenuItem -l "Display Layer from Selected" -c "KGMCreateLayer 0;";\n\t\tmenuItem -d 1;\n\n\t\tmenuItem -l "Render Layer from Selected" -c "KGMCreateLayer 1;";\n\t\tmenuItem -d 1;\n\n\t\t    menuItem -label (uiRes("m_dagMenuProc.kSelect"))  -c ("select -r " + $object);\n\t\t    menuItem -label (uiRes("m_dagMenuProc.kSelectHierarchy"))  -c ("select -hierarchy " + $object);\n\t\t    string $container = `container -q -fc $object`;\n\t\t    if( $container != "" ){\n\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kSelectContainer")) -c ("select -r " + $container);\n\t\t    }\n\n    \t    menuItem -d true;\n\n\t\t    optionalDagMenuProc( $parent, $object );\n\t\t    // Create the dg traversal menu\n\t\t    //\n\t\t    string $menu = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kDGTraversal")) `;\n\t\t    menu -e \n\t\t\t    -pmc ( "createTraversalMenuItems "+$menu+" "+$object ) $menu;\n\t\t    setParent -m $parent;\n\n\t\t    // create the history menu\n\t\t    //\n\t\t    string $menu = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kInputs")) `;\n\t\t    menu -e \n\t\t\t    -pmc ( "createHistoryMenuItems "+$menu+" "+$object ) $menu;\n\t\t    setParent -m $parent;\n\n\t\t    $menu = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kOutputs")) `;\n\t\t    menu -e -pmc ( "createFutureMenuItems "+$menu+" "+$object ) $menu;\n\t\t    setParent -m $parent;\n\n\t \t    // Look at the shape child of this object\n\t \t    //\n \t\t    string $shapes[] = `listRelatives -path -s $object`;\n\n\t\t    // get current selection of shapes\n\t\t    string $currentSel[] = `ls -sl -dagObjects -shapes` ;\n\n\t\t    string $paintParent = "" ;\n\t\t    int $selIndex  ;\n\n \t\t    int $i;\n \t\t    for ($i = 0; $i < size($shapes); ++$i) \n\t\t    {\n\t\t\t    string $nodeType = `nodeType $shapes[$i]` ;\n\n\t\t\t    if ( ( $nodeType == "nurbsSurface") ||\n\t\t\t\t     ( $nodeType == "mesh") ||\n\t\t\t\t     ( $nodeType == "subdiv")) \n\t\t\t    {\n\t\t\t\t    // save the object name if it is not already selected by the user\n\t\t\t\t    // We use this info to select the object if user chooses a paint option\n\t\t\t\t    //\n\t\t\t\t    // If user has selected multiple objects and is using context menu on one of them\n\t\t\t\t    // we do not change the selection list as user may want to paint some attribute \n\t\t\t\t    // on all of them. (It is the way it has been working all along...we don\'t want to \n\t\t\t\t    // break it )\n    \t\t\t\t\n\t\t\t\t    int $found = 0 ;\n\t\t\t\t    for( $selIndex  = 0 ; $selIndex  < size( $currentSel ); ++$selIndex  )\n\t\t\t\t    {\n\t\t\t\t\t    if( $shapes[$i] == $currentSel[ $selIndex  ] )\n\t\t\t\t\t    {\n\t\t\t\t\t\t    $found = 1 ;\n\t\t\t\t\t\t    break ;\n\t\t\t\t\t    }\n\t\t\t\t    }\n    \t\t\t\t\n\t\t\t\t    if( $found )\n\t\t\t\t    {\n\t\t\t\t\t    $artSelectObject = "" ;\n\t\t\t\t    }\n\t\t\t\t    else\n\t\t\t\t    {\n\t\t\t\t\t    // check if the object is in component selection mode\n\t\t\t\t\t    // and if it is, do not do any further selection.\n\t\t\t\t\t    // We are assuming that if the object is in hilite mode\n\t\t\t\t\t    // then the user is in component selection mode.\n    \t\t\t\t\t\n\t\t\t\t\t    $currentSel = `ls -hilite` ;\n\t\t\t\t\t    for( $selIndex  = 0 ; $selIndex  < size( $currentSel ); ++$selIndex  )\n\t\t\t\t\t    {\n\t\t\t\t\t\t    if( $object == $currentSel[ $selIndex  ] )\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    $found = 1 ;\n\t\t\t\t\t\t\t    break ;\n\t\t\t\t\t\t    }\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if( !$found ) \n\t\t\t\t\t\t    $artSelectObject = $object ;\n\t\t\t\t\t    else\n\t\t\t\t\t\t    $artSelectObject = "" ;\n\t\t\t\t    }\n    \t\t\t\t\n\t\t\t\t    $paintParent = `menuItem -subMenu true -aob true -label (uiRes("m_dagMenuProc.kPaintSubmenu")) `;\n\t\t\t\t    menu -e\t-pmc ( "createArtAttrMenuItems "+ $paintParent +" "+$object ) $paintParent ;\n\t\t\t\t    setParent -m $parent;\n\t\t\t\t    break ;\n\t\t\t    }\n\t\t    }\n\n\t        $menu = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kActions")) `;\n\t\t    menu -e -pmc ( "createActionsMenuItems "+$menu+" "+$object ) $menu;\n\n\t\t    setParent -m $parent;\n\t\t    // If the object can handle uv sets then add the uvset menu\n\t\t    //\n\t\t    string $shape = objectHandlesUvSets( $object );\n\t\t    if ($shape != "")\n\t\t    {\n\t\t\t    $menu = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kUVSets")) `;\n\t\t\t    menu -e \n\t\t\t\t    -pmc ( "createUVsetMenuItems "+$menu+" " +$object + " "+ $shape )\n\t\t\t\t    $menu;\n\t\t\t    setParent -m $parent;\n\t\t    }\n\n\t\t    string $shape = objectHandlesColorSets( $object );\n\t\t    if ($shape != "")\n\t\t    {\n\t\t\t    $menu = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kColorSets")) `;\n\t\t\t    menu -e \n\t\t\t\t    -pmc ( "createColorSetMenuItems "+$menu+" " +$object + " "+ $shape )\n\t\t\t\t    $menu;\n\t\t\t    setParent -m $parent;\n\t\t    }\n\n\t\t    // Shader menu to be able to quickly assign existing shaders\n\t\t    // to the object under the pointer.\n\t\t    //\n    \t    menuItem -d true;\n\n \t\t    menuItem -label (uiRes("m_dagMenuProc.kMaterialAttributes")) -c ("showSG "+$object);\n        \t\n    \t    menuItem -d true;\n            \n            buildShaderMenus($object);\n            \n            menuItem -d true;\n\n            menuItem -divider true;\n\n            string $removeOverrideMenuItem = `menuItem \n\t\t\t    -label (uiRes("m_dagMenuProc.kRemoveMaterialOverride"))\n                -subMenu true`;\n            menuItem -edit -postMenuCommand\n                ("buildMaterialRemoveOverrideMenu -surface "+$object+" "+$removeOverrideMenuItem)\n                $removeOverrideMenuItem;\n            setParent -m ..;\n\t\t    int $mentalIsLoaded = 0;\n\t\t    string $renderer;\n\t        for ($renderer in `renderer -query -namesOfAvailableRenderers`) {\n\t\t\t    if( $renderer == "mentalRay" ) {\n\t\t\t\t    $mentalIsLoaded = 1;\n\t\t\t\t    break;\n\t\t\t    }\n\t\t    }\n\n\t\t    if ($mentalIsLoaded) {\n \t\t\t    $menu = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kBaking")) `;\n \t\t\t    menu -e\n\t\t\t\t    -pmc ( "createBakingMenuItems "+$menu+" "+$object )\n\t\t\t\t    $menu;\n \t\t\t    setParent -m $parent;\n\t\t    }\n\n    //\t\t{\n    // \t\t\t$menu = `menuItem -subMenu true -label $paint `;\n    //\t\t\tmenu -e\n    //\t\t\t\t-pmc ( "createPaintingMenuItems "+$menu+" "+$object )\n    //\t\t\t\t$menu;\n    // \t\t\tsetParent -m $parent;\n    //\t\t}\n\n\t\t    if ($mode == "dynamicsMenuSet") {\n\t\t\t    menuItem -d true;\n\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kConnectField"))  -c ("connectDynamic -f " + $object);\n\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kConnectEmitter"))  -c ("connectDynamic -em " + $object);\n\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kConnectCollision"))  -c ("connectDynamic -c " + $object);\n\t\t    }\n\n\t\t    // is there a reference associated with the object ?\n\t\t    // and if so, is it in a loaded or unloaded state?\n\t\t    string $refNode = `getRelatedReference $object`;\n\t\t    if( size($refNode) > 0) {\n\t\t\t    menuItem -d true;\n\t\t\t    if( `file -rfn $refNode -q -dr` ) {\n\t\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kLoadRelatedReference"))  -c ("loadRelatedReference " + $object);\n\t\t\t    } else {\n\t\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kReloadRelatedReference"))  -c ("loadRelatedReference " + $object);\n\t\t\t\t    menuItem -label (uiRes("m_dagMenuProc.kUnloadRelatedReference"))  -c ("unloadRelatedReference " + $object);\n\t\t\t    }\n\t\t\t    // Is this reference a proxy? If so, add proxy switch submenu\n\t\t\t    //\n\t\t\t    string $proxyNodes[] = `getRelatedProxies $refNode`;\n\t\t\t    if(size($proxyNodes) > 0) {\n\t\t\t\t    $menu = `menuItem -subMenu true -label (uiRes("m_dagMenuProc.kReloadProxy")) `;\n\t\t\t\t    menu -e\n\t\t\t\t\t    -pmc ( "createSwitchProxyMenuItems "+$menu+" "+$object + " " + $refNode )\n\t\t\t\t\t    $menu;\n\t\t\t\t    setParent -m $parent;\n\t\t\t    }\n\t\t    }\n\n\t\t    string $container = `container -q -findContainer { $object }`;\n    \t\t\n\t\t    if (size($container) > 0)\n\t\t    {\n\t\t\t    string $menuProc = `getAttr ($container+".rmbCommand")`;\n\t\t\t    if (size($menuProc) > 0)\n\t\t\t    {\n\t\t\t\t    if (`exists $menuProc`)\n\t\t\t\t    {\n\t\t\t\t\t    string $menuItems[] = `eval $menuProc`;\n\t\t\t\t\t    int $mm;\n\t\t\t\t\t    int $menuCount = size($menuItems);\n\t\t\t\t\t    if ($menuCount % 2 != 0)\n\t\t\t\t\t    {\n\t\t\t\t\t\t    // the user provided an invalid # of items, skip\n\t\t\t\t\t\t    // the last\n\t\t\t\t\t\t    //\n\t\t\t\t\t\t    $menuCount--;\n\t\t\t\t\t    }\n\t\t\t\t\t    if ($menuCount > 0) {\n\t\t\t\t\t\t    string $containerType = `getAttr ($container + ".containerType")`;\n\t\t\t\t\t\t    if ($containerType == "")\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    menuItem -d true;\n\t\t\t\t\t\t\t    menuItem - subMenu true -label (uiRes("m_dagMenuProc.kCustom"));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    else\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    menuItem -d true;\n\t\t\t\t\t\t\t    menuItem -subMenu true -label ($containerType);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    for ($mm = 0; $mm < $menuCount; $mm+=2)\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t\t    menuItem -label $menuItems[$mm] -c ($menuItems[$mm+1]+" "+$object);\n\t\t\t\t\t\t    }\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t\t    else {\n\t\t\t\t\t    string $warnStr = (uiRes("m_dagMenuProc.kSkippedRmb"));\n\t\t\t\t\t    warning(`format -s $menuProc $warnStr`);\n\t\t\t\t    }\n\t\t\t    }\n\t\t    }\n\n\t\t    setParent -m $parent;\n\n        }\n\t} else {\n\t\tstring $warn = (uiRes("m_dagMenuProc.kMenuWarn"));\n\t\twarning(`format -s $parent $warn`);\n\t}\n}\n}' 
            
            rigMenu = pm.scriptNode(n = "KGMRigMenu", scriptType = 1, bs =pyScript, sourceType = "python")
            menuChange = pm.scriptNode(n = "KGMMenuChange", scriptType = 0, bs =melScript, sourceType = "mel")
            pm.addAttr("KGMRigMenu",       m=True, sn = "KGMScriptProtector", ln = "KGMScriptProtector", at = "message")
            pm.addAttr("KGMMenuChange",    m=True, sn = "KGMScriptProtector", ln = "KGMScriptProtector", at = "message")
            self.scriptNode.append(rigMenu)
            self.scriptNode.append(menuChange)
        else:
            rigMenu = pm.PyNode("KGMRigMenu")
            menuChange = pm.PyNode("KGMMenuChange")
            self.scriptNode.append(rigMenu)
            self.scriptNode.append(menuChange)
        
    def addMirrorAttr(self):
        ctrls = self.basicCtrlPyList
        direction = ""
        translateMirrorValue = [1,1,1]
        rotateMirrorValue    = [1,1,1]
        
        for ctrl in ctrls:
            if ctrl.name().find("Left") != -1:
                direction = "Left"
                translateMirrorValue = [-1,-1,-1]
                rotateMirrorValue    = [1,1,1]
            elif ctrl.name().find("Right") != -1:
                direction = "Right"
                translateMirrorValue = [-1,-1,-1]
                rotateMirrorValue    = [1,1,1]
            else:
                direction = "Center"
                translateMirrorValue = [-1,1,1]
                rotateMirrorValue    = [1,-1,-1]
                
            pm.addAttr(ctrl,  m = True,       sn = "KGMRigMenuItem",      ln = "KGMRigMenuItem",      at = "message"              )   
            pm.addAttr(ctrl,  sn = "Mirror"          ,    ln = "Mirror",              at = "compound",    nc = 3                  )
            pm.addAttr(ctrl,  sn = "MirrorTarget"    ,    ln = "MirrorTarget",        at = "message" ,    p = "Mirror"            )
            pm.addAttr(ctrl,  sn = "MirrorTranslate" ,    ln = "MirrorTranslate" ,    at = "double3",     p = "Mirror", nc = 3    )
            pm.addAttr(ctrl,  sn = "MirrorTranslateX",    ln = "MirrorTranslateX",    at = "double" ,     p = "MirrorTranslate"   )
            pm.addAttr(ctrl,  sn = "MirrorTranslateY",    ln = "MirrorTranslateY",    at = "double" ,     p = "MirrorTranslate"   )
            pm.addAttr(ctrl,  sn = "MirrorTranslateZ",    ln = "MirrorTranslateZ",    at = "double" ,     p = "MirrorTranslate"   )
            pm.addAttr(ctrl,  sn = "MirrorRotate" ,       ln = "MirrorRotate" ,       at = "double3",     p = "Mirror", nc = 3    )
            pm.addAttr(ctrl,  sn = "MirrorRotateX",       ln = "MirrorRotateX",       at = "doubleAngle", p = "MirrorRotate"      )
            pm.addAttr(ctrl,  sn = "MirrorRotateY",       ln = "MirrorRotateY",       at = "doubleAngle", p = "MirrorRotate"      )
            pm.addAttr(ctrl,  sn = "MirrorRotateZ",       ln = "MirrorRotateZ",       at = "doubleAngle", p = "MirrorRotate"      )
            pm.addAttr(ctrl,  m = True,        sn =  "Mirror"+direction ,  ln =  "Mirror"+direction ,      at =  "message"        )
            
            pm.setAttr(ctrl + ".KGMRigMenuItem"   ,   s = 2   )
            pm.setAttr(ctrl + ".MirrorTranslate"  ,   translateMirrorValue[0], translateMirrorValue[1], translateMirrorValue[2], type = "double3" )
            pm.setAttr(ctrl + ".MirrorRotate"     ,   rotateMirrorValue[0]   , rotateMirrorValue[1]   , rotateMirrorValue[2]   , type = "double3" )
    
    def createGroupId(self):
        # BindPose groupID.
        bindPose = pm.createNode("groupId", n="BindPose")
        pm.addAttr(   m=True, sn = "All",             ln = "All",         at = "message"  )
        pm.addAttr(   m=True, sn = "Fly",             ln = "Fly",         at = "message"  )
        pm.addAttr(   m=True, sn = "Body",            ln = "Body",        at = "message"  )
        pm.addAttr(   m=True, sn = "Spine",           ln = "Spine",       at = "message"  )
        pm.addAttr(   m=True, sn = "Head",            ln = "Head",        at = "message"  )
        pm.addAttr(   m=True, sn = "Arms",            ln = "Arms",        at = "message"  )
        pm.addAttr(   m=True, sn = "RightArm",        ln = "RightArm",    at = "message"  )
        pm.addAttr(   m=True, sn = "RightFinger",     ln = "RightFinger", at = "message"  )
        pm.addAttr(   m=True, sn = "LeftArm",         ln = "LeftArm",     at = "message"  )
        pm.addAttr(   m=True, sn = "LeftFinger",      ln = "LeftFinger",  at = "message"  )
        pm.addAttr(   m=True, sn = "Legs",            ln = "Legs",        at = "message"  )
        pm.addAttr(   m=True, sn = "RightLeg",        ln = "RightLeg",    at = "message"  )
        pm.addAttr(   m=True, sn = "RightToe",        ln = "RightToe",    at = "message"  )
        pm.addAttr(   m=True, sn = "LeftLeg",         ln = "LeftLeg",     at = "message"  )
        pm.addAttr(   m=True, sn = "LeftToe",         ln = "LeftToe",     at = "message"  )
        pm.addAttr(   m=True, sn = "Facial",          ln = "Facial",      at = "message"  )
        self.goupID.append(bindPose)
        
        # IKFKs groupID.    
        groupIdName = ["LeftArmIKFK", "RightArmIKFK", "LeftLegIKFK", "RightLegIKFK"]                  
        for idName in groupIdName:
            grpId = pm.createNode("groupId", n=idName)
            pm.addAttr(           sn = "IKFK",       ln = "IKFK",                                at = "compound" , nc = 5    )
            pm.addAttr(   m=True, sn = "IKFKAttr",   ln = "IKFKAttr",    nn = "IKFK Attr",       at = "message" , p = "IKFK" )
            pm.addAttr(   m=True, sn = "Target",     ln = "Target",      nn = "Target List" ,    at = "message" , p = "IKFK" )
            pm.addAttr(   m=True, sn = "FKCtrlList", ln = "FKCtrlList",  nn = "FK Ctrl List" ,   at = "message" , p = "IKFK" )
            pm.addAttr(   m=True, sn = "IKCtrlList", ln = "IKCtrlList",  nn = "IK Ctrl List" ,   at = "message" , p = "IKFK" )
            pm.addAttr(   ci=True,sn = "TwistReverse", ln = "TwistReverse", min = 0, max = 1,    at = "bool"    , p = "IKFK" )
            self.goupID.append(grpId)
            
        # RigGrp Data init
        pm.select("RigGrp", r=True) 
        pm.addAttr(m=True,    sn = "RigGroupList",    ln = "RigGroupList",    at = "message")
        
        pm.connectAttr( "RigCtrlGrp.msg"          , "RigGrp.RigGroupList[0]"  )
        pm.connectAttr( "RigSysGrp.msg"           , "RigGrp.RigGroupList[1]"  )
        pm.connectAttr( "BindPose.msg"            , "RigGrp.RigGroupList[2]"  )
        pm.connectAttr( "WorldCtrl.msg"           , "RigGrp.RigGroupList[3]"  )
        pm.connectAttr( "FlyCtrl.msg"             , "RigGrp.RigGroupList[4]"  )
        pm.connectAttr( "RootCtrl.msg"            , "RigGrp.RigGroupList[5]"  )
        pm.connectAttr( "HipIKCtrl.msg"           , "RigGrp.RigGroupList[6]"  )
        pm.connectAttr( "ChestPoint.msg"          , "RigGrp.RigGroupList[7]"  )
        pm.connectAttr( "BodyIKCtrl.msg"          , "RigGrp.RigGroupList[8]"  )
        pm.connectAttr( "NeckPoint.msg"           , "RigGrp.RigGroupList[9]"  )
        pm.connectAttr( "HeadPoint.msg"           , "RigGrp.RigGroupList[10]" )
        pm.connectAttr( "HeadRigSysGrp.msg"       , "RigGrp.RigGroupList[11]" )
        pm.connectAttr( "JawCtrl.msg"             , "RigGrp.RigGroupList[12]" )
    
    def connectCtrlToBindPose(self):
        for part, ctrlList in self.basicCtrlList.iteritems():
            count  = 0
            for ctrl in ctrlList:
                pm.connectAttr (ctrl+".msg", "BindPose."+ part + "[%i]" %count )
                count += 1
                
    def connectBindPoseToCtrl(self):
        for ctrlList in self.basicCtrlList.itervalues():
            for ctrl in ctrlList:
                pm.connectAttr ("BindPose.msg", ctrl +".KGMRigMenuItem[0]" )
    
    def connectIKFKToCtrl(self):
        groupIdName = ["LeftArmIKFK", "RightArmIKFK", "LeftLegIKFK", "RightLegIKFK"] 
        for idName in groupIdName:
            idPart = idName.partition("IKFK")[0]
            for ctrl in self.basicCtrlList[idPart]:
                pm.connectAttr (idName+".msg", ctrl +".KGMRigMenuItem[1]" )
        pm.connectAttr ("LeftLegIKFK.msg", "LeftToeCtrl.KGMRigMenuItem[1]" )
        pm.connectAttr ("RightLegIKFK.msg", "RightToeCtrl.KGMRigMenuItem[1]" )

    def connectMirrorTaget(self):
        allCtrlLsit = self.basicCtrlPyList

        for ctrl in allCtrlLsit:
            if "Left" in ctrl.name():
                mirrorCtrl = ctrl.replace("Left", "Right")
                pm.connectAttr(ctrl+".msg", mirrorCtrl+".MirrorTarget")
            elif "Right" in ctrl.name():
                mirrorCtrl = ctrl.replace("Right", "Left")
                pm.connectAttr(ctrl+".msg", mirrorCtrl+".MirrorTarget")
            else:
                pm.connectAttr(ctrl+".msg", ctrl+".MirrorTarget")
    
    def connectIKFKList(self):
        pm.connectAttr( "LeftArmIKFKCtrl.IKFK"        , "LeftArmIKFK.IKFKAttr"        )
        pm.connectAttr( "LeftArmRig1Jnt.msg"          , "LeftArmIKFK.Target[0]"       )
        pm.connectAttr( "LeftArmRig2Jnt.msg"          , "LeftArmIKFK.Target[1]"       )
        pm.connectAttr( "LeftWristFKConnectGrp.msg"   , "LeftArmIKFK.Target[2]"       )
        pm.connectAttr( "LeftWristIKConnectGrp.msg"   , "LeftArmIKFK.Target[3]"       )
        pm.connectAttr( "LeftArmIKCtrl.Twist"         , "LeftArmIKFK.IKCtrlList[0]"   )
        pm.connectAttr( "LeftArmIKCtrl.Stretch"       , "LeftArmIKFK.IKCtrlList[1]"   )
        pm.connectAttr( "LeftArmIKCtrl.UpSlide"       , "LeftArmIKFK.IKCtrlList[2]"   )
        pm.connectAttr( "LeftArmIKCtrl.DwSlide"       , "LeftArmIKFK.IKCtrlList[3]"   )
        pm.connectAttr( "LeftShoulderFKCtrl.msg"      , "LeftArmIKFK.FKCtrlList[0]"   )
        pm.connectAttr( "LeftElbowFKCtrl.msg"         , "LeftArmIKFK.FKCtrlList[1]"   )
        pm.connectAttr( "LeftWristFKCtrl.msg"         , "LeftArmIKFK.FKCtrlList[2]"   )
        
        pm.connectAttr( "RightArmIKFKCtrl.IKFK"       , "RightArmIKFK.IKFKAttr"       )
        pm.connectAttr( "RightArmRig1Jnt.msg"         , "RightArmIKFK.Target[0]"      )
        pm.connectAttr( "RightArmRig2Jnt.msg"         , "RightArmIKFK.Target[1]"      )
        pm.connectAttr( "RightWristFKConnectGrp.msg"  , "RightArmIKFK.Target[2]"      )
        pm.connectAttr( "RightWristIKConnectGrp.msg"  , "RightArmIKFK.Target[3]"      )
        pm.connectAttr( "RightArmIKCtrl.Twist"        , "RightArmIKFK.IKCtrlList[0]"  )
        pm.connectAttr( "RightArmIKCtrl.Stretch"      , "RightArmIKFK.IKCtrlList[1]"  )
        pm.connectAttr( "RightArmIKCtrl.UpSlide"      , "RightArmIKFK.IKCtrlList[2]"  )
        pm.connectAttr( "RightArmIKCtrl.DwSlide"      , "RightArmIKFK.IKCtrlList[3]"  )
        pm.connectAttr( "RightShoulderFKCtrl.msg"     , "RightArmIKFK.FKCtrlList[0]"  )
        pm.connectAttr( "RightElbowFKCtrl.msg"        , "RightArmIKFK.FKCtrlList[1]"  )
        pm.connectAttr( "RightWristFKCtrl.msg"        , "RightArmIKFK.FKCtrlList[2]"  )
        
        
        pm.connectAttr( "LeftLegIKFKCtrl.IKFK"        , "LeftLegIKFK.IKFKAttr"        )
        pm.connectAttr( "LeftLegRig1Jnt.msg"          , "LeftLegIKFK.Target[0]"       )
        pm.connectAttr( "LeftLegRig2Jnt.msg"          , "LeftLegIKFK.Target[1]"       )
        pm.connectAttr( "LeftAnkleFKCtrlTarget.msg"   , "LeftLegIKFK.Target[2]"       )
        pm.connectAttr( "LeftAnkleIKConnectGrp.msg"   , "LeftLegIKFK.Target[3]"       )
        pm.connectAttr( "LeftToeCtrlTarget.msg"       , "LeftLegIKFK.Target[4]"       )
        pm.connectAttr( "LeftLegIKCtrl.Twist"         , "LeftLegIKFK.IKCtrlList[0]"   )
        pm.connectAttr( "LeftLegIKCtrl.Stretch"       , "LeftLegIKFK.IKCtrlList[1]"   )
        pm.connectAttr( "LeftLegIKCtrl.UpSlide"       , "LeftLegIKFK.IKCtrlList[2]"   )
        pm.connectAttr( "LeftLegIKCtrl.DwSlide"       , "LeftLegIKFK.IKCtrlList[3]"   )
        pm.connectAttr( "LeftLegIKCtrl.BallRoll"      , "LeftLegIKFK.IKCtrlList[4]"   )
        pm.connectAttr( "LeftToeCtrl.ry"              , "LeftLegIKFK.IKCtrlList[5]"   )
        pm.connectAttr( "LeftLegIKCtrl.BallRollMulti" , "LeftLegIKFK.IKCtrlList[6]"   )
        pm.connectAttr( "LeftHipFKCtrl.msg"           , "LeftLegIKFK.FKCtrlList[0]"   )
        pm.connectAttr( "LeftKneeFKCtrl.msg"          , "LeftLegIKFK.FKCtrlList[1]"   )
        pm.connectAttr( "LeftAnkleFKCtrl.msg"         , "LeftLegIKFK.FKCtrlList[2]"   )
        pm.connectAttr( "LeftToeCtrl.msg"             , "LeftLegIKFK.FKCtrlList[3]"   )
        
        
        pm.connectAttr( "RightLegIKFKCtrl.IKFK"        , "RightLegIKFK.IKFKAttr"       )
        pm.connectAttr( "RightLegRig1Jnt.msg"          , "RightLegIKFK.Target[0]"      )
        pm.connectAttr( "RightLegRig2Jnt.msg"          , "RightLegIKFK.Target[1]"      )
        pm.connectAttr( "RightAnkleFKCtrlTarget.msg"   , "RightLegIKFK.Target[2]"      )
        pm.connectAttr( "RightAnkleIKConnectGrp.msg"   , "RightLegIKFK.Target[3]"      )
        pm.connectAttr( "RightToeCtrlTarget.msg"       , "RightLegIKFK.Target[4]"      )
        pm.connectAttr( "RightLegIKCtrl.Twist"         , "RightLegIKFK.IKCtrlList[0]"  )
        pm.connectAttr( "RightLegIKCtrl.Stretch"       , "RightLegIKFK.IKCtrlList[1]"  )
        pm.connectAttr( "RightLegIKCtrl.UpSlide"       , "RightLegIKFK.IKCtrlList[2]"  )
        pm.connectAttr( "RightLegIKCtrl.DwSlide"       , "RightLegIKFK.IKCtrlList[3]"  )
        pm.connectAttr( "RightLegIKCtrl.BallRoll"      , "RightLegIKFK.IKCtrlList[4]"  )
        pm.connectAttr( "RightToeCtrl.ry"              , "RightLegIKFK.IKCtrlList[5]"  )
        pm.connectAttr( "RightLegIKCtrl.BallRollMulti" , "RightLegIKFK.IKCtrlList[6]"  )
        pm.connectAttr( "RightHipFKCtrl.msg"           , "RightLegIKFK.FKCtrlList[0]"  )
        pm.connectAttr( "RightKneeFKCtrl.msg"          , "RightLegIKFK.FKCtrlList[1]"  )
        pm.connectAttr( "RightAnkleFKCtrl.msg"         , "RightLegIKFK.FKCtrlList[2]"  )
        pm.connectAttr( "RightToeCtrl.msg"             , "RightLegIKFK.FKCtrlList[3]"  )
    
    def editMirrorAttr(self):
        pm.setAttr("RightLegIKCtrl.MirrorTranslateX", -1)
        pm.setAttr("RightLegIKCtrl.MirrorTranslateY", 1)
        pm.setAttr("RightLegIKCtrl.MirrorTranslateZ", 1)
        pm.setAttr("RightLegIKCtrl.MirrorRotateX", 1)
        pm.setAttr("RightLegIKCtrl.MirrorRotateY", -1)
        pm.setAttr("RightLegIKCtrl.MirrorRotateZ", -1)
        
        pm.setAttr("LeftLegIKCtrl.MirrorTranslateX", -1)
        pm.setAttr("LeftLegIKCtrl.MirrorTranslateY", 1)
        pm.setAttr("LeftLegIKCtrl.MirrorTranslateZ", 1)
        pm.setAttr("LeftLegIKCtrl.MirrorRotateX", 1)
        pm.setAttr("LeftLegIKCtrl.MirrorRotateY", -1)
        pm.setAttr("LeftLegIKCtrl.MirrorRotateZ", -1)
        
        pm.setAttr("JawCtrl.MirrorTranslateX", 1)
        pm.setAttr("JawCtrl.MirrorTranslateY", 1)
        pm.setAttr("JawCtrl.MirrorTranslateZ", -1)
        pm.setAttr("JawCtrl.MirrorRotateX", -1)
        pm.setAttr("JawCtrl.MirrorRotateY", -1)
        pm.setAttr("JawCtrl.MirrorRotateZ", 1)
    
        for index in range(1,6):
            pm.setAttr("TongueFK%iCtrl.MirrorTranslateX" %index, 1)
            pm.setAttr("TongueFK%iCtrl.MirrorTranslateY" %index, 1)
            pm.setAttr("TongueFK%iCtrl.MirrorTranslateZ" %index, -1)
            pm.setAttr("TongueFK%iCtrl.MirrorRotateX" %index, -1)
            pm.setAttr("TongueFK%iCtrl.MirrorRotateY" %index, -1)
            pm.setAttr("TongueFK%iCtrl.MirrorRotateZ" %index, 1)
    
        for index in range(1,5):
            pm.setAttr("Tongue%iCtrl.MirrorTranslateX" %index, 1)
            pm.setAttr("Tongue%iCtrl.MirrorTranslateY" %index, 1)
            pm.setAttr("Tongue%iCtrl.MirrorTranslateZ" %index, -1)
            pm.setAttr("Tongue%iCtrl.MirrorRotateX" %index, -1)
            pm.setAttr("Tongue%iCtrl.MirrorRotateY" %index, -1)
            pm.setAttr("Tongue%iCtrl.MirrorRotateZ" %index, 1)
        
        # Finger FK
        fingerList = ["LeftFingerThumb1Ctrl", "LeftFingerThumb2Ctrl", "LeftFingerThumb3Ctrl", "LeftFingerThumb4Ctrl", \
                  "LeftFingerIndex1Ctrl", "LeftFingerIndex2Ctrl", "LeftFingerIndex3Ctrl", "LeftFingerIndex4Ctrl", \
                  "LeftFingerMiddle1Ctrl", "LeftFingerMiddle2Ctrl", "LeftFingerMiddle3Ctrl", "LeftFingerMiddle4Ctrl",    \
                  "LeftFingerRing1Ctrl", "LeftFingerRing2Ctrl", "LeftFingerRing3Ctrl", "LeftFingerRing4Ctrl",    \
                  "LeftFingerPinky1Ctrl", "LeftFingerPinky2Ctrl", "LeftFingerPinky3Ctrl", "LeftFingerPinky4Ctrl",    \
                  "RightFingerThumb1Ctrl", "RightFingerThumb2Ctrl", "RightFingerThumb3Ctrl", "RightFingerThumb4Ctrl", \
                  "RightFingerIndex1Ctrl", "RightFingerIndex2Ctrl", "RightFingerIndex3Ctrl", "RightFingerIndex4Ctrl", \
                  "RightFingerMiddle1Ctrl", "RightFingerMiddle2Ctrl", "RightFingerMiddle3Ctrl", "RightFingerMiddle4Ctrl",    \
                  "RightFingerRing1Ctrl", "RightFingerRing2Ctrl", "RightFingerRing3Ctrl", "RightFingerRing4Ctrl",    \
                  "RightFingerPinky1Ctrl", "RightFingerPinky2Ctrl", "RightFingerPinky3Ctrl", "RightFingerPinky4Ctrl" ]
    
        for finger in fingerList:          
            pm.setAttr(finger+".MirrorTranslateX" , 1 )
            pm.setAttr(finger+".MirrorTranslateY" , -1)
            pm.setAttr(finger+".MirrorTranslateZ" , -1)
            pm.setAttr(finger+".MirrorRotateX"    , -1)
            pm.setAttr(finger+".MirrorRotateY"    , 1 )
            pm.setAttr(finger+".MirrorRotateZ"    , -1)
        
        #LeftArmIKFK, RightArmIKFK, LeftLegIKFK, RightLegIKFK
        pm.setAttr("LeftArmIKFK.TwistReverse" , 0)
        pm.setAttr("LeftLegIKFK.TwistReverse" , 0)
        pm.setAttr("RightArmIKFK.TwistReverse", 1)
        pm.setAttr("RightLegIKFK.TwistReverse", 1)
        pm.select(cl=True)
        
    def activateMenuTool(self):
        pm.setAttr('KGMRigMenu.scriptType',7)
        pm.currentTime(2)
        pm.currentTime(1)
        pm.setAttr("KGMRigMenu.scriptType",1)
    
    def setGMKimMenu(self):
        self.createScriptNode()
        self.addMirrorAttr()
        self.createGroupId()
        self.connectCtrlToBindPose()
        self.connectBindPoseToCtrl()
        self.connectIKFKToCtrl()
        self.connectMirrorTaget()
        self.connectIKFKList()
        self.editMirrorAttr()
        self.activateMenuTool()
        print "GMKimMenuTool"