import pymel.core as pm
import Core_GMKRig.Utils as Utils
reload(Utils)

def KGM_NeckSet():
    #/////////////////////////
    #Create IK Joint  
    #/////////////////////////
    Utils.KGM_DuplicateJnt("Neck1Jnt", "NeckIKRig1Jnt")
    Utils.KGM_DuplicateJnt("Neck2Jnt", "NeckIKRig2Jnt")
    Utils.KGM_DuplicateJnt("Neck3Jnt", "NeckIKRig3Jnt")
    Utils.KGM_DuplicateJnt("HeadScaleFixJnt", "NeckIKRig4Jnt")
    pm.parent('NeckIKRig4Jnt','NeckIKRig3Jnt')
    pm.parent('NeckIKRig3Jnt','NeckIKRig2Jnt')
    pm.parent('NeckIKRig2Jnt','NeckIKRig1Jnt')
    pm.joint('NeckIKRig1Jnt',zso=1,ch=1,e=1,oj='xyz',secondaryAxisOrient='yup')
    pm.joint('NeckIKRig4Jnt',zso=1,ch=1,e=1,oj='none',secondaryAxisOrient='yup')
    pm.group(em=1,n="HeadPoint")
    Utils.KGM_Aline("NeckIKRig4Jnt", "HeadPoint", "p")
    pm.parent('HeadPoint','NeckIKRig4Jnt')
    pm.select(cl=1)
    pm.joint(p=(0, 0, 0),n="NeckIKCtrlJnt")
    Utils.KGM_Aline("NeckIKRig1Jnt", "NeckIKCtrlJnt", "p")
    pm.select(cl=1)
    pm.joint(p=(0, 0, 0),n="HeadIKCtrlJnt")
    Utils.KGM_Aline("NeckIKRig4Jnt", "HeadIKCtrlJnt", "p")
    #/////////////////////////
    #Create Neck IK  
    #/////////////////////////
    pm.ikHandle(ee="NeckIKRig4Jnt",sj="NeckIKRig1Jnt",ns=2,sol='ikSplineSolver')
    pm.rename("ikHandle1","NeckIKHandle")
    pm.rename("effector1","NeckIKEffector")
    pm.rename("curve1","NeckIKCurve")
    pm.duplicate('NeckIKCurve',rr=1,n="NeckIKChkCurve")
    #/////////////////////////
    #Make Ctrls
    #/////////////////////////
    pm.curve(p=[(0, 0, -1), (-1, 0, 0), (0, 0, 1), (1, 0, 0), (0, 0, -1)],k=[0, 1, 2, 3, 4],d=1)
    pm.rename("curve1","NeckCtrl")
    pm.delete(ch=1)
    Utils.KGM_MakeCtrlShape("NeckCtrl")
    Utils.KGM_Aline("NeckIKRig1Jnt", "NeckCtrlGrp", "p")
    pm.parent('NeckIKCtrlJnt','NeckCtrl')
    pm.circle(c=(0, 0, 0),n="HeadCtrl")
    pm.delete(ch=1)
    Utils.KGM_MakeCtrlShape("HeadCtrl")
    Utils.KGM_Aline("NeckIKRig1Jnt", "HeadCtrlGrp", "p")
    pm.group(em=1,n="HeadFollowGrp")
    Utils.KGM_Aline("NeckIKRig1Jnt", "HeadFollowGrp", "p")
    pm.parent('HeadFollowGrp','HeadCtrlGrp')
    pm.parent('HeadCtrl','HeadFollowGrp')
    Utils.KGM_Aline("NeckIKRig4Jnt ", "HeadFollowGrp", "p")
    pm.parent('HeadIKCtrlJnt','HeadFollowGrp')
    pm.group(em=1,n="HeadRigSysGrp")
    Utils.KGM_Aline("HeadFollowGrp", "HeadRigSysGrp", "p")
    pm.parent('HeadRigSysGrp','HeadCtrl')
    pm.addAttr('HeadCtrl',ln="Stretch",max=10,dv=0,at='double',min=0)
    pm.setAttr('HeadCtrl.Stretch',e=1,keyable=True)
    pm.addAttr('HeadCtrl',ln="Scale_Squash",max=10,dv=0,at='double',min=0)
    pm.setAttr('HeadCtrl.Scale_Squash',e=1,keyable=True)
    pm.addAttr('HeadCtrl',ln="Follow",en="Neck:Body:Root:Fly:",at="enum")
    pm.setAttr('HeadCtrl.Follow',e=1,keyable=True)
    pm.addAttr('HeadCtrl',ln="Neck",at='bool')
    pm.setAttr('HeadCtrl.Neck',e=1,channelBox=True)
    pm.addAttr('HeadCtrl',ln="Squash",max=10,dv=0,at='double',min=0)
    pm.setAttr('HeadCtrl.Squash',e=1,keyable=True)
    pm.group(em=1,n="NeckPoint")
    Utils.KGM_Aline("SpineIKRig6Jnt", "NeckPoint", "a")
    pm.parent('NeckPoint','SpineIKRig6Jnt')
    pm.setAttr("NeckPoint.rotateX",-180)
    pm.setAttr("NeckPoint.rotateZ",90)
    pm.setAttr("NeckPoint.rotateY",90)
    #bug Fix
    pm.parent('NeckPoint','SpineRigSysGrp')
    pm.pointConstraint('SpineIKRig6Jnt','NeckPoint',mo=1,weight=1,n="NeckPointPointCon")
    pm.orientConstraint('BodyIKCtrl','NeckPoint',mo=1,weight=1,n="NeckPointOrientCon")
    pm.pointConstraint('HeadCtrl','HeadIKCtrlJnt',mo=1,weight=1,n="HeadIKCtrlJntPointCon")
    pm.orientConstraint('HeadCtrl','HeadIKCtrlJnt',mo=1,weight=1,n="HeadIKCtrlJntOrientCon")
    pm.parentConstraint('NeckPoint','NeckCtrlGrp',mo=1,weight=1,n="NeckCtrlGrpParentCon")
    pm.parentConstraint('NeckCtrl','HeadCtrlGrp',mo=1,weight=1,n="HeadCtrlGrpParentCon")
    pm.orientConstraint('NeckCtrl','BodyIKCtrl','RootCtrl','FlyCtrl','HeadFollowGrp',mo=1,weight=1,n="HeadFollowGrpOrientCon")
    pm.parentConstraint('NeckIKRig4Jnt','HeadRigSysGrp',mo=1,weight=1,skipRotate=['x', 'y', 'z'])
    pm.orientConstraint('HeadCtrl','HeadPoint',mo=1,weight=1)
    pm.orientConstraint('HeadCtrl','HeadScaleConnectGrp',mo=1,weight=1)
    pm.setAttr("HeadCtrl.Follow",1)
    pm.setAttr("HeadFollowGrpOrientCon.NeckCtrlW0",0)
    pm.setAttr("HeadFollowGrpOrientCon.BodyIKCtrlW1",1)
    pm.setAttr("HeadFollowGrpOrientCon.RootCtrlW2",0)
    pm.setAttr("HeadFollowGrpOrientCon.FlyCtrlW3",0)
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.NeckCtrlW0',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.BodyIKCtrlW1',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.RootCtrlW2',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.FlyCtrlW3',currentDriver='HeadCtrl.Follow')
    pm.setAttr("HeadCtrl.Follow",2)
    pm.setAttr("HeadFollowGrpOrientCon.NeckCtrlW0",0)
    pm.setAttr("HeadFollowGrpOrientCon.BodyIKCtrlW1",0)
    pm.setAttr("HeadFollowGrpOrientCon.RootCtrlW2",1)
    pm.setAttr("HeadFollowGrpOrientCon.FlyCtrlW3",0)
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.NeckCtrlW0',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.BodyIKCtrlW1',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.RootCtrlW2',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.FlyCtrlW3',currentDriver='HeadCtrl.Follow')
    pm.setAttr("HeadCtrl.Follow",3)
    pm.setAttr("HeadFollowGrpOrientCon.NeckCtrlW0",0)
    pm.setAttr("HeadFollowGrpOrientCon.BodyIKCtrlW1",0)
    pm.setAttr("HeadFollowGrpOrientCon.RootCtrlW2",0)
    pm.setAttr("HeadFollowGrpOrientCon.FlyCtrlW3",1)
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.NeckCtrlW0',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.BodyIKCtrlW1',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.RootCtrlW2',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.FlyCtrlW3',currentDriver='HeadCtrl.Follow')
    pm.setAttr("HeadCtrl.Follow",0)
    pm.setAttr("HeadFollowGrpOrientCon.NeckCtrlW0",1)
    pm.setAttr("HeadFollowGrpOrientCon.BodyIKCtrlW1",0)
    pm.setAttr("HeadFollowGrpOrientCon.RootCtrlW2",0)
    pm.setAttr("HeadFollowGrpOrientCon.FlyCtrlW3",0)
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.NeckCtrlW0',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.BodyIKCtrlW1',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.RootCtrlW2',currentDriver='HeadCtrl.Follow')
    pm.setDrivenKeyframe('HeadFollowGrpOrientCon.FlyCtrlW3',currentDriver='HeadCtrl.Follow')
    #/////////////////////////
    #Neck IK curve set 
    #/////////////////////////
    pm.skinCluster('NeckIKCtrlJnt','HeadIKCtrlJnt','NeckIKCurve',dr=4.0,tsb=1,mi=5,n="NeckSkinCluster")
    pm.rename("tweak1","NeckTweak")
    pm.rename("bindPose1","NeckCurveBindPose")
    pm.setAttr("NeckIKHandle.dTwistControlEnable",1)
    pm.setAttr('NeckIKHandle.dWorldUpType',4)
    pm.setAttr('NeckIKHandle.dWorldUpAxis',3)
    pm.setAttr("NeckIKHandle.dWorldUpVectorX",1)
    pm.setAttr("NeckIKHandle.dWorldUpVectorY",0)
    pm.setAttr("NeckIKHandle.dWorldUpVectorZ",0)
    pm.setAttr("NeckIKHandle.dWorldUpVectorEndX",1)
    pm.setAttr("NeckIKHandle.dWorldUpVectorEndY",0)
    pm.setAttr("NeckIKHandle.dWorldUpVectorEndZ",0)
    pm.connectAttr('NeckCtrl.worldMatrix[0]','NeckIKHandle.dWorldUpMatrix',f=1)
    pm.connectAttr('HeadCtrl.worldMatrix[0]','NeckIKHandle.dWorldUpMatrixEnd',f=1)
    #/////////////////////////
    #NeckIKCurve length
    #/////////////////////////
    pm.createNode('pointOnCurveInfo',n="NeckIKCurvePointInfo1")
    pm.createNode('pointOnCurveInfo',n="NeckIKCurvePointInfo2")
    pm.createNode('pointOnCurveInfo',n="NeckIKCurvePointInfo3")
    pm.createNode('pointOnCurveInfo',n="NeckIKCurvePointInfo4")
    pm.setAttr("NeckIKCurvePointInfo1.turnOnPercentage",1)
    pm.setAttr("NeckIKCurvePointInfo2.turnOnPercentage",1)
    pm.setAttr("NeckIKCurvePointInfo3.turnOnPercentage",1)
    pm.setAttr("NeckIKCurvePointInfo4.turnOnPercentage",1)
    pm.connectAttr('NeckIKCurveShape.worldSpace[0]','NeckIKCurvePointInfo1.inputCurve',f=1)
    pm.connectAttr('NeckIKCurveShape.worldSpace[0]','NeckIKCurvePointInfo2.inputCurve',f=1)
    pm.connectAttr('NeckIKCurveShape.worldSpace[0]','NeckIKCurvePointInfo3.inputCurve',f=1)
    pm.connectAttr('NeckIKCurveShape.worldSpace[0]','NeckIKCurvePointInfo4.inputCurve',f=1)
    pm.setAttr("NeckIKCurvePointInfo1.parameter",0)
    pm.setAttr("NeckIKCurvePointInfo2.parameter",0.334)
    pm.setAttr("NeckIKCurvePointInfo3.parameter",0.668)
    pm.setAttr("NeckIKCurvePointInfo4.parameter",1)
    pm.createNode('distanceBetween',n="NeckDistance1")
    pm.createNode('distanceBetween',n="NeckDistance2")
    pm.createNode('distanceBetween',n="NeckDistance3")
    pm.connectAttr('NeckIKCurvePointInfo1.position','NeckDistance1.point1',f=1)
    pm.connectAttr('NeckIKCurvePointInfo2.position','NeckDistance1.point2',f=1)
    pm.connectAttr('NeckIKCurvePointInfo2.position','NeckDistance2.point1',f=1)
    pm.connectAttr('NeckIKCurvePointInfo3.position','NeckDistance2.point2',f=1)
    pm.connectAttr('NeckIKCurvePointInfo3.position','NeckDistance3.point1',f=1)
    pm.connectAttr('NeckIKCurvePointInfo4.position','NeckDistance3.point2',f=1)
    #/////////////////////////
    #NeckIKChkCurve length
    #/////////////////////////
    pm.createNode('pointOnCurveInfo',n="NeckIKChkCurvePointInfo1")
    pm.createNode('pointOnCurveInfo',n="NeckIKChkCurvePointInfo2")
    pm.createNode('pointOnCurveInfo',n="NeckIKChkCurvePointInfo3")
    pm.createNode('pointOnCurveInfo',n="NeckIKChkCurvePointInfo4")
    pm.setAttr("NeckIKChkCurvePointInfo1.turnOnPercentage",1)
    pm.setAttr("NeckIKChkCurvePointInfo2.turnOnPercentage",1)
    pm.setAttr("NeckIKChkCurvePointInfo3.turnOnPercentage",1)
    pm.setAttr("NeckIKChkCurvePointInfo4.turnOnPercentage",1)
    pm.connectAttr('NeckIKChkCurveShape.worldSpace[0]','NeckIKChkCurvePointInfo1.inputCurve',f=1)
    pm.connectAttr('NeckIKChkCurveShape.worldSpace[0]','NeckIKChkCurvePointInfo2.inputCurve',f=1)
    pm.connectAttr('NeckIKChkCurveShape.worldSpace[0]','NeckIKChkCurvePointInfo3.inputCurve',f=1)
    pm.connectAttr('NeckIKChkCurveShape.worldSpace[0]','NeckIKChkCurvePointInfo4.inputCurve',f=1)
    pm.setAttr("NeckIKChkCurvePointInfo1.parameter",0)
    pm.setAttr("NeckIKChkCurvePointInfo2.parameter",0.334)
    pm.setAttr("NeckIKChkCurvePointInfo3.parameter",0.668)
    pm.setAttr("NeckIKChkCurvePointInfo4.parameter",1)
    pm.createNode('distanceBetween',n="NeckChkDistance1")
    pm.createNode('distanceBetween',n="NeckChkDistance2")
    pm.createNode('distanceBetween',n="NeckChkDistance3")
    pm.connectAttr('NeckIKChkCurvePointInfo1.position','NeckChkDistance1.point1',f=1)
    pm.connectAttr('NeckIKChkCurvePointInfo2.position','NeckChkDistance1.point2',f=1)
    pm.connectAttr('NeckIKChkCurvePointInfo2.position','NeckChkDistance2.point1',f=1)
    pm.connectAttr('NeckIKChkCurvePointInfo3.position','NeckChkDistance2.point2',f=1)
    pm.connectAttr('NeckIKChkCurvePointInfo3.position','NeckChkDistance3.point1',f=1)
    pm.connectAttr('NeckIKChkCurvePointInfo4.position','NeckChkDistance3.point2',f=1)
    #/////////////////////////
    #Stretch blend Attr
    #/////////////////////////
    pm.createNode('blendTwoAttr',n="NeckStretchBlend1")
    pm.createNode('blendTwoAttr',n="NeckStretchBlend2")
    pm.createNode('blendTwoAttr',n="NeckStretchBlend3")
    pm.connectAttr('NeckChkDistance1.distance','NeckStretchBlend1.input[0]',f=1)
    pm.connectAttr('NeckDistance1.distance','NeckStretchBlend1.input[1]',f=1)
    pm.connectAttr('NeckChkDistance2.distance','NeckStretchBlend2.input[0]',f=1)
    pm.connectAttr('NeckDistance2.distance','NeckStretchBlend2.input[1]',f=1)
    pm.connectAttr('NeckChkDistance3.distance','NeckStretchBlend3.input[0]',f=1)
    pm.connectAttr('NeckDistance3.distance','NeckStretchBlend3.input[1]',f=1)
    #/////////////////////////
    #NeckDistanceDivide
    #/////////////////////////
    pm.createNode('multiplyDivide',n="NeckDistanceDivide1")
    pm.createNode('multiplyDivide',n="NeckDistanceDivide2")
    pm.createNode('multiplyDivide',n="NeckDistanceDivide3")
    pm.setAttr('NeckDistanceDivide1.operation',2)
    pm.setAttr('NeckDistanceDivide2.operation',2)
    pm.setAttr('NeckDistanceDivide3.operation',2)
    pm.connectAttr('NeckStretchBlend1.output','NeckDistanceDivide1.input1X',f=1)
    pm.connectAttr('NeckStretchBlend1.output','NeckDistanceDivide1.input2Y',f=1)
    pm.connectAttr('NeckStretchBlend2.output','NeckDistanceDivide2.input1X',f=1)
    pm.connectAttr('NeckStretchBlend2.output','NeckDistanceDivide2.input2Y',f=1)
    pm.connectAttr('NeckStretchBlend3.output','NeckDistanceDivide3.input1X',f=1)
    pm.connectAttr('NeckStretchBlend3.output','NeckDistanceDivide3.input2Y',f=1)
    pm.connectAttr('NeckChkDistance1.distance','NeckDistanceDivide1.input2X',f=1)
    pm.connectAttr('NeckChkDistance1.distance','NeckDistanceDivide1.input1Y',f=1)
    pm.connectAttr('NeckChkDistance2.distance','NeckDistanceDivide2.input2X',f=1)
    pm.connectAttr('NeckChkDistance2.distance','NeckDistanceDivide2.input1Y',f=1)
    pm.connectAttr('NeckChkDistance3.distance','NeckDistanceDivide3.input2X',f=1)
    pm.connectAttr('NeckChkDistance3.distance','NeckDistanceDivide3.input1Y',f=1)
    #/////////////////////////
    #streath X
    #/////////////////////////
    pm.createNode('multDoubleLinear',n="NeckTransMulti1")
    pm.createNode('multDoubleLinear',n="NeckTransMulti2")
    pm.createNode('multDoubleLinear',n="NeckTransMulti3")
    pm.connectAttr('NeckDistanceDivide1.outputX','NeckTransMulti1.input1',f=1)
    pm.connectAttr('NeckDistanceDivide2.outputX','NeckTransMulti2.input1',f=1)
    pm.connectAttr('NeckDistanceDivide3.outputX','NeckTransMulti3.input1',f=1)
    pm.setAttr("NeckTransMulti1.input2",
        pm.getAttr('NeckIKRig2Jnt.translateX'))
    pm.setAttr("NeckTransMulti2.input2",
        pm.getAttr('NeckIKRig3Jnt.translateX'))
    pm.setAttr("NeckTransMulti3.input2",
        pm.getAttr('NeckIKRig4Jnt.translateX'))
    pm.connectAttr('NeckTransMulti1.output','NeckIKRig2Jnt.translateX',f=1)
    pm.connectAttr('NeckTransMulti2.output','NeckIKRig3Jnt.translateX',f=1)
    pm.connectAttr('NeckTransMulti3.output','NeckIKRig4Jnt.translateX',f=1)
    pm.createNode('multDoubleLinear',n="NeckStretchMulti")
    pm.setAttr("NeckStretchMulti.input2",0.1)
    pm.connectAttr('HeadCtrl.Stretch','NeckStretchMulti.input1',f=1)
    pm.connectAttr('NeckStretchMulti.output','NeckStretchBlend1.attributesBlender',f=1)
    pm.connectAttr('NeckStretchMulti.output','NeckStretchBlend2.attributesBlender',f=1)
    pm.connectAttr('NeckStretchMulti.output','NeckStretchBlend3.attributesBlender',f=1)
    #/////////////////////////
    #Neck Squash Blend
    #/////////////////////////
    pm.createNode('blendTwoAttr',n="NeckSquashBlend1")
    pm.createNode('blendTwoAttr',n="NeckSquashBlend2")
    pm.connectAttr('NeckDistanceDivide1.outputY','NeckSquashBlend1.input[1]',f=1)
    pm.connectAttr('NeckDistanceDivide2.outputY','NeckSquashBlend2.input[1]',f=1)
    pm.setAttr("NeckSquashBlend1.input[0]",1)
    pm.setAttr("NeckSquashBlend2.input[0]",1)
    pm.createNode('multDoubleLinear',n="NeckSquashMulti")
    pm.setAttr("NeckSquashMulti.input2",0.1)
    pm.connectAttr('HeadCtrl.Squash','NeckSquashMulti.input1',f=1)
    pm.connectAttr('NeckSquashMulti.output','NeckSquashBlend1.attributesBlender',f=1)
    pm.connectAttr('NeckSquashMulti.output','NeckSquashBlend2.attributesBlender',f=1)
    #/////////////////////////
    #Neck Squash Scale
    #/////////////////////////
    pm.createNode('blendTwoAttr',n="NeckSquashBalanceBlend2")
    pm.createNode('blendTwoAttr',n="NeckSquashBalanceBlend3")
    pm.connectAttr('NeckSquashBlend1.output','NeckSquashBalanceBlend2.input[1]',f=1)
    pm.connectAttr('NeckSquashBlend2.output','NeckSquashBalanceBlend3.input[1]',f=1)
    pm.setAttr("NeckSquashBalanceBlend2.input[0]",1)
    pm.setAttr("NeckSquashBalanceBlend3.input[0]",1)
    pm.connectAttr('NeckSquashBalanceBlend2.output','Neck2Jnt.scaleY',f=1)
    pm.connectAttr('NeckSquashBalanceBlend2.output','Neck2Jnt.scaleZ',f=1)
    pm.connectAttr('NeckSquashBalanceBlend3.output','Neck3Jnt.scaleY',f=1)
    pm.connectAttr('NeckSquashBalanceBlend3.output','Neck3Jnt.scaleZ',f=1)
    #///////////////////////////
    #NeckSquashBalanceBlend set
    #///////////////////////////
    pm.setAttr("NeckSquashBalanceBlend2.attributesBlender",0.871)
    pm.setAttr("NeckSquashBalanceBlend3.attributesBlender",0.869)
    #///////////////////////////
    #HedaScaleSquash set
    #///////////////////////////
    pm.createNode('multiplyDivide',n="HeadScaleSquashMulti")
    pm.createNode('multiplyDivide',n="HeadScaleSquashDivide")
    pm.setAttr('HeadScaleSquashDivide.operation',2)
    pm.createNode('blendColors',n="HeadScaleSquashBlend")
    pm.setAttr("HeadScaleSquashBlend.color2R",1)
    pm.setAttr("HeadScaleSquashBlend.color2G",1)
    pm.setAttr("HeadScaleSquashBlend.color2B",1)
    pm.createNode('multDoubleLinear',n="HeadScaleSquashBlendMulti")
    pm.setAttr("HeadScaleSquashBlendMulti.input2",0.1)
    pm.connectAttr('HeadCtrl.scaleX','HeadScaleSquashMulti.input1Y',f=1)
    pm.connectAttr('HeadCtrl.scaleX','HeadScaleSquashMulti.input2Z',f=1)
    pm.connectAttr('HeadCtrl.scaleY','HeadScaleSquashMulti.input1X',f=1)
    pm.connectAttr('HeadCtrl.scaleY','HeadScaleSquashMulti.input1Z',f=1)
    pm.connectAttr('HeadCtrl.scaleZ','HeadScaleSquashMulti.input2X',f=1)
    pm.connectAttr('HeadCtrl.scaleZ','HeadScaleSquashMulti.input2Y',f=1)
    pm.connectAttr('HeadCtrl.scale','HeadScaleSquashDivide.input1',f=1)
    pm.connectAttr('HeadScaleSquashMulti.output','HeadScaleSquashDivide.input2',f=1)
    pm.connectAttr('HeadScaleSquashBlend.output','HeadRigSysGrp.scale',f=1)
    pm.connectAttr('HeadScaleSquashBlend.output','HeadScaleSquashGrp.scale',f=1)
    pm.connectAttr('HeadScaleSquashDivide.output','HeadScaleSquashBlend.color1',f=1)
    pm.connectAttr('HeadCtrl.Scale_Squash','HeadScaleSquashBlendMulti.input1',f=1)
    pm.connectAttr('HeadScaleSquashBlendMulti.output','HeadScaleSquashBlend.blender',f=1)
    pm.connectAttr('HeadCtrl.scale','HeadScaleConnectGrp.scale',f=1)
    #///////////////////////////
    #Jnt -> Ik Jnt constraint
    #///////////////////////////
    pm.parentConstraint('NeckIKRig1Jnt','Neck1Jnt',mo=1,weight=1)
    pm.parentConstraint('NeckIKRig2Jnt','Neck2Jnt',mo=1,weight=1)
    pm.parentConstraint('NeckIKRig3Jnt','Neck3Jnt',mo=1,weight=1)
    pm.pointConstraint('NeckIKRig4Jnt','HeadScaleFixJnt',mo=1,weight=1)
    #///////////////////////////
    #outline
    #///////////////////////////
    # RigCtrlGrp
    pm.group('NeckCtrlGrp','HeadCtrlGrp',n="HeadNeckCtrlGrp")
    pm.xform(os=1,piv=(0, 0, 0))
    pm.parent('HeadNeckCtrlGrp','RigCtrlGrp')
    # RigSysGrp
    pm.group('NeckIKRig1Jnt','NeckIKHandle','NeckIKChkCurve',n="NeckRigSysGrp")
    pm.xform(os=1,piv=(0, 0, 0))
    pm.parent('NeckRigSysGrp','HeadNeckCtrlGrp')
    #RigGrp
    pm.group('NeckCtrlBaseGrp',n="NeckSysGrp")
    pm.xform(os=1,piv=(0, 0, 0))
    pm.parent('HeadCtrlBase','NeckCtrlBaseGrp')
    pm.parent('NeckIKCurve','NeckSysGrp')
    pm.parent('NeckSysGrp','RigSysGrp')
    pm.delete('HeadCtrlBaseGrp')
    pm.setAttr("NeckIKRig1Jnt.visibility",0)
    pm.setAttr("NeckIKRig1Jnt.v",
        lock=True,channelBox=False,keyable=False)
    pm.setAttr("NeckIKCtrlJnt.visibility",0)
    pm.setAttr("HeadIKCtrlJnt.visibility",0)
    pm.setAttr("NeckIKCtrlJnt.v",
        lock=True,channelBox=False,keyable=False)
    pm.setAttr("HeadIKCtrlJnt.v",
        lock=True,channelBox=False,keyable=False)
    #///////////////////////////
    #Ctrls shape set
    #///////////////////////////
    pm.addAttr('NeckSysGrp',ln="NeckCtrlRadius",at='double')
    pm.setAttr('NeckSysGrp.NeckCtrlRadius',e=1,channelBox=True)
    pm.addAttr('NeckSysGrp',ln="HeadCtrlRadius",at='double')
    pm.setAttr('NeckSysGrp.HeadCtrlRadius',e=1,channelBox=True)
    pm.addAttr('NeckSysGrp',ln="HeadCtrlPostion",at='double')
    pm.setAttr('NeckSysGrp.HeadCtrlPostion',e=1,channelBox=True)
    pm.connectAttr('NeckSysGrp.NeckCtrlRadius','NeckCtrlBase.scaleX',f=1)
    pm.connectAttr('NeckSysGrp.NeckCtrlRadius','NeckCtrlBase.scaleY',f=1)
    pm.connectAttr('NeckSysGrp.NeckCtrlRadius','NeckCtrlBase.scaleZ',f=1)
    pm.connectAttr('NeckSysGrp.HeadCtrlRadius','HeadCtrlBase.scaleX',f=1)
    pm.connectAttr('NeckSysGrp.HeadCtrlRadius','HeadCtrlBase.scaleY',f=1)
    pm.connectAttr('NeckSysGrp.HeadCtrlRadius','HeadCtrlBase.scaleZ',f=1)
    pm.connectAttr('NeckSysGrp.HeadCtrlPostion','HeadCtrlBase.translateY',f=1)
    #///////////////////////////
    #default
    #///////////////////////////
    pm.setAttr("NeckSysGrp.NeckCtrlRadius",0.5)
    pm.setAttr("NeckSysGrp.HeadCtrlRadius",0.5)
    pm.setAttr("NeckSysGrp.HeadCtrlPostion",0.5)